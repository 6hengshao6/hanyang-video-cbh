/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import"../../geometry.js";import"../../chunks/typedArrayUtil.js";import{L as t}from"../../chunks/Logger.js";import{a as e,e as s}from"../../chunks/maybe.js";import{g as o}from"../../chunks/unitUtils.js";import{t as n,j as i,c as r}from"../../chunks/aaBoundingRect.js";import{project as a}from"../../geometry/support/webMercatorUtils.js";import c from"../../geometry/Point.js";import"../../chunks/ensureType.js";import"../../geometry/Extent.js";import"../../chunks/tslib.es6.js";import"../../chunks/string.js";import"../../chunks/object.js";import"../../core/lang.js";import"../../core/accessorSupport/decorators/property.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/metadata.js";import"../../core/Error.js";import"../../config.js";import"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/tracking.js";import"../../geometry/Geometry.js";import"../../core/JSONSupport.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/ArrayPool.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../core/promiseUtils.js";import"../../chunks/reader.js";import"../../geometry/SpatialReference.js";import"../../chunks/writer.js";import"../../chunks/jsonMap.js";import"../../chunks/Ellipsoid.js";import"../../core/accessorSupport/decorators/cast.js";import"../../geometry/Multipoint.js";import"../../chunks/zmUtils.js";import"../../geometry/Polygon.js";import"../../chunks/extentUtils.js";import"../../chunks/mathUtils.js";import"../../chunks/vec3.js";import"../../chunks/common.js";import"../../chunks/vec4.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../geometry/support/jsonUtils.js";const m=t.getLogger("esri.layers.support.ElevationSampler");class p{queryElevation(t){return h(t.clone(),this)}on(){return x}projectIfRequired(t,e){return j(t,e)}}class l extends p{get spatialReference(){return this.extent.spatialReference}constructor(t,e,s){super(),this.tile=t,this.noDataValue=s;const i=t.tile.extent;this.extent=n(i,e.spatialReference),this.extent.zmin=t.zmin,this.extent.zmax=t.zmax,this._aaExtent=i;const r=o(e.spatialReference),a=e.lodAt(t.tile.level).resolution*r;this.demResolution={min:a,max:a}}contains(t){const s=this.projectIfRequired(t,this.spatialReference);return!e(s)&&this.containsAt(s.x,s.y)}containsAt(t,e){return i(this._aaExtent,t,e)}elevationAt(t,e){if(!this.containsAt(t,e)){const s=this.extent,o=`${s.xmin}, ${s.ymin}, ${s.xmax}, ${s.ymax}`;return m.warn("#elevationAt()",`Point used to sample elevation (${t}, ${e}) is outside of the sampler extent (${o})`),this.noDataValue}return s(this.tile.sample(t,e),this.noDataValue)}}class u extends p{get spatialReference(){return this.extent.spatialReference}constructor(t,e,s){let o;super(),"number"==typeof e?(this.noDataValue=e,o=null):(o=e,this.noDataValue=s),this.samplers=o?t.map((t=>new l(t,o,this.noDataValue))):t;const i=this.samplers[0];if(i){this.extent=i.extent.clone();const{min:t,max:e}=i.demResolution;this.demResolution={min:t,max:e};for(let t=1;t<this.samplers.length;t++){const e=this.samplers[t];this.extent.union(e.extent),this.demResolution.min=Math.min(this.demResolution.min,e.demResolution.min),this.demResolution.max=Math.max(this.demResolution.max,e.demResolution.max)}}else this.extent=n(r(),o.spatialReference),this.demResolution={min:0,max:0}}elevationAt(t,e){for(const s of this.samplers)if(s.containsAt(t,e))return s.elevationAt(t,e);return m.warn("#elevationAt()",`Point used to sample elevation (${t}, ${e}) is outside of the sampler`),this.noDataValue}}function h(t,e){const s=j(t,e.spatialReference);if(!s)return null;switch(t.type){case"point":!function(t,e,s){t.z=s.elevationAt(e.x,e.y)}(t,s,e);break;case"polyline":!function(t,e,s){f.spatialReference=e.spatialReference;const o=t.hasM&&!t.hasZ;for(let n=0;n<t.paths.length;n++){const i=t.paths[n],r=e.paths[n];for(let t=0;t<i.length;t++){const e=i[t],n=r[t];f.x=n[0],f.y=n[1],o&&(e[3]=e[2]),e[2]=s.elevationAt(f.x,f.y)}}t.hasZ=!0}(t,s,e);break;case"multipoint":!function(t,e,s){f.spatialReference=e.spatialReference;const o=t.hasM&&!t.hasZ;for(let n=0;n<t.points.length;n++){const i=t.points[n],r=e.points[n];f.x=r[0],f.y=r[1],o&&(i[3]=i[2]),i[2]=s.elevationAt(f.x,f.y)}t.hasZ=!0}(t,s,e)}return t}function j(t,s){if(e(t))return null;const o=t.spatialReference;if(o.equals(s))return t;const n=a(t,s);return n||m.error(`Cannot project geometry spatial reference (wkid:${o.wkid}) to elevation sampler spatial reference (wkid:${s.wkid})`),n}const f=new c,x={remove(){}};export{p as ElevationSamplerBase,u as MultiTileElevationSampler,l as TileElevationSampler,h as updateGeometryElevation};
