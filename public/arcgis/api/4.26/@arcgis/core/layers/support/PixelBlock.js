/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import s from"../../core/Error.js";import{JSONSupport as e}from"../../core/JSONSupport.js";import{clone as i}from"../../core/lang.js";import{L as r}from"../../chunks/Logger.js";import{i as l,a as o}from"../../chunks/maybe.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import{cast as h}from"../../core/accessorSupport/decorators/cast.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import{g as p}from"../../chunks/pixelRangeUtils.js";import"../../chunks/object.js";import"../../chunks/typedArrayUtil.js";import"../../config.js";import"../../chunks/string.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/metadata.js";import"../../chunks/ArrayPool.js";import"../../chunks/tracking.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../core/promiseUtils.js";import"../../chunks/ensureType.js";class c{constructor(t=null,s=null,e=null){this.minValue=t,this.maxValue=s,this.noDataValue=e}}var u;let m=u=class extends e{static createEmptyBand(t,s){return new(u.getPixelArrayConstructor(t))(s)}static getPixelArrayConstructor(t){let s;switch(t){case"u1":case"u2":case"u4":case"u8":s=Uint8Array;break;case"u16":s=Uint16Array;break;case"u32":s=Uint32Array;break;case"s8":s=Int8Array;break;case"s16":s=Int16Array;break;case"s32":s=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":s=Float32Array;break;case"f64":s=Float64Array}return s}constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.premultiplyAlpha=!1,this.statistics=null,this.depthCount=1}castPixelType(t){if(!t)return"f32";let s=t.toLowerCase();return["u1","u2","u4"].includes(s)?s="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(s)||(s="f32"),s}getPlaneCount(){return this.pixels?.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new s("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new c)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let s=0;if(l(t))for(let e=0;e<t.length;e++)t[e]&&s++;else s=this.width*this.height;this.validPixelCount=s}clamp(t){if(!t||"f64"===t||"f32"===t||!this.pixels)return;const[s,e]=p(t),i=this.pixels,r=this.width*this.height,l=i.length;let o,a,h;const n=[];for(let p=0;p<l;p++){h=u.createEmptyBand(t,r),o=i[p];for(let t=0;t<r;t++)a=o[t],h[t]=a>e?e:a<s?s:a;n.push(h)}this.pixels=n,this.pixelType=t}extractBands(t){const{pixels:s,statistics:e}=this;if(o(t)||0===t.length||!s||0===s.length)return this;const i=s.length,r=t.some((t=>t>=s.length)),l=i===t.length&&!t.some(((t,s)=>t!==s));return r||l?this:new u({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>s[t])),statistics:e&&t.map((t=>e[t]))})}clone(){const t=new u({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let s;l(this.mask)&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const e=u.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const i=!!this.pixels[0].slice;for(s=0;s<this.pixels.length;s++)t.pixels[s]=i?this.pixels[s].slice(0,this.pixels[s].length):new e(this.pixels[s])}if(this.statistics)for(t.statistics=[],s=0;s<this.statistics.length;s++)t.statistics[s]=i(this.statistics[s]);return t.premultiplyAlpha=this.premultiplyAlpha,t}_fillFrom8Bit(t){const{mask:s,maskIsAlpha:e,premultiplyAlpha:i,pixels:o}=this;if(!t||!o||!o.length)return void r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let a,h,n,p;a=h=n=o[0],o.length>=3?(h=o[1],n=o[2]):2===o.length&&(h=o[1]);const c=new Uint32Array(t),u=this.width*this.height;if(a.length===u)if(l(s)&&s.length===u)if(e)for(p=0;p<u;p++){const t=s[p];if(t){const s=t/255;c[p]=i?t<<24|n[p]*s<<16|h[p]*s<<8|a[p]*s:t<<24|n[p]<<16|h[p]<<8|a[p]}}else for(p=0;p<u;p++)s[p]&&(c[p]=255<<24|n[p]<<16|h[p]<<8|a[p]);else for(p=0;p<u;p++)c[p]=255<<24|n[p]<<16|h[p]<<8|a[p];else r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:s,mask:e,statistics:i}=this;if(!t||!s||!s.length)return void r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const o=this.pixelType;let a=1,h=0,n=1;if(i&&i.length>0){for(const t of i)if(null!=t.minValue&&(h=Math.min(h,t.minValue)),null!=t.maxValue&&null!=t.minValue){const s=t.maxValue-t.minValue;n=Math.max(n,s)}a=255/n}else{let t=255;"s8"===o?(h=-128,t=127):"u16"===o?t=65535:"s16"===o?(h=-32768,t=32767):"u32"===o?t=4294967295:"s32"===o?(h=-2147483648,t=2147483647):"f32"===o?(h=-34e38,t=34e38):"f64"===o&&(h=-Number.MAX_VALUE,t=Number.MAX_VALUE),a=255/(t-h)}const p=new Uint32Array(t),c=this.width*this.height;let u,m,g,d,f;if(u=m=g=s[0],u.length!==c)return r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(s.length>=2)if(m=s[1],s.length>=3&&(g=s[2]),l(e)&&e.length===c)for(d=0;d<c;d++)e[d]&&(p[d]=255<<24|(g[d]-h)*a<<16|(m[d]-h)*a<<8|(u[d]-h)*a);else for(d=0;d<c;d++)p[d]=255<<24|(g[d]-h)*a<<16|(m[d]-h)*a<<8|(u[d]-h)*a;else if(l(e)&&e.length===c)for(d=0;d<c;d++)f=(u[d]-h)*a,e[d]&&(p[d]=255<<24|f<<16|f<<8|f);else for(d=0;d<c;d++)f=(u[d]-h)*a,p[d]=255<<24|f<<16|f<<8|f}_fillFrom32Bit(t){const{pixels:s,mask:e}=this;if(!t||!s||!s.length)return r.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let i,o,a,h;i=o=a=s[0],s.length>=3?(o=s[1],a=s[2]):2===s.length&&(o=s[1]);const n=this.width*this.height;if(i.length!==n)return r.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let p=0;if(l(e)&&e.length===n)for(h=0;h<n;h++)t[p++]=i[h],t[p++]=o[h],t[p++]=a[h],t[p++]=1&e[h];else for(h=0;h<n;h++)t[p++]=i[h],t[p++]=o[h],t[p++]=a[h],t[p++]=1}_calculateBandStatistics(t,s){let e=1/0,i=-1/0;const r=t.length;let o,a=0;if(l(s))for(o=0;o<r;o++)s[o]&&(a=t[o],e=a<e?a:e,i=a>i?a:i);else for(o=0;o<r;o++)a=t[o],e=a<e?a:e,i=a>i?a:i;return new c(e,i)}};t([a({json:{write:!0}})],m.prototype,"width",void 0),t([a({json:{write:!0}})],m.prototype,"height",void 0),t([a({json:{write:!0}})],m.prototype,"pixelType",void 0),t([h("pixelType")],m.prototype,"castPixelType",null),t([a({json:{write:!0}})],m.prototype,"validPixelCount",void 0),t([a({json:{write:!0}})],m.prototype,"mask",void 0),t([a({json:{write:!0}})],m.prototype,"maskIsAlpha",void 0),t([a({json:{write:!0}})],m.prototype,"pixels",void 0),t([a()],m.prototype,"premultiplyAlpha",void 0),t([a({json:{write:!0}})],m.prototype,"statistics",void 0),t([a({json:{write:!0}})],m.prototype,"depthCount",void 0),t([a({json:{write:!0}})],m.prototype,"noDataValues",void 0),t([a({json:{write:!0}})],m.prototype,"bandMasks",void 0),m=u=t([n("esri.layers.support.PixelBlock")],m);const g=m;export{g as default};
