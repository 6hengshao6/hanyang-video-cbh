/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import s from"../core/Collection.js";import r from"../core/Error.js";import{L as t}from"../chunks/Logger.js";import{u as o}from"../chunks/maybe.js";import{M as i}from"../chunks/MultiOriginJSONSupport.js";import{property as p}from"../core/accessorSupport/decorators/property.js";import{cast as n}from"../core/accessorSupport/decorators/cast.js";import"../chunks/typedArrayUtil.js";import{r as m}from"../chunks/reader.js";import{subclass as c}from"../core/accessorSupport/decorators/subclass.js";import{w as u}from"../chunks/writer.js";import a from"./Layer.js";import{BlendLayer as l}from"./mixins/BlendLayer.js";import{O as j}from"../chunks/OperationalLayer.js";import{ScaleRangeLayer as h}from"./mixins/ScaleRangeLayer.js";import d from"./support/ImageElement.js";import y from"./support/LocalMediaElementSource.js";import k from"./support/VideoElement.js";import"../chunks/ArrayPool.js";import"../core/Evented.js";import"../core/Accessor.js";import"../core/Handles.js";import"../chunks/get.js";import"../chunks/utils.js";import"../chunks/handleUtils.js";import"../core/lang.js";import"../chunks/metadata.js";import"../chunks/tracking.js";import"../chunks/watch.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../core/promiseUtils.js";import"../chunks/object.js";import"../config.js";import"../chunks/string.js";import"../chunks/ensureType.js";import"../chunks/shared.js";import"../chunks/SimpleObservable.js";import"../core/JSONSupport.js";import"../geometry.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"../geometry/SpatialReference.js";import"../chunks/unitUtils.js";import"../chunks/jsonMap.js";import"../chunks/Ellipsoid.js";import"../geometry/Point.js";import"../geometry/support/webMercatorUtils.js";import"../geometry/Multipoint.js";import"../chunks/zmUtils.js";import"../geometry/Polygon.js";import"../chunks/extentUtils.js";import"../chunks/aaBoundingRect.js";import"../chunks/mathUtils.js";import"../chunks/vec3.js";import"../chunks/common.js";import"../chunks/vec4.js";import"../geometry/Polyline.js";import"../chunks/typeUtils.js";import"../geometry/support/jsonUtils.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"../core/Identifiable.js";import"../core/Loadable.js";import"../core/Promise.js";import"../chunks/jsonUtils.js";import"../chunks/parser.js";import"../chunks/colorUtils.js";import"../chunks/screenUtils.js";import"../chunks/mat4f32.js";import"../chunks/mat4.js";import"../chunks/_commonjsHelpers.js";import"../chunks/commonProperties2.js";import"../TimeExtent.js";import"../chunks/timeUtils.js";import"../chunks/persistableUrlUtils.js";import"../support/timeUtils.js";import"../chunks/ElevationInfo.js";import"./support/fieldUtils.js";import"../chunks/arcadeOnDemand.js";import"../chunks/unitConversionUtils.js";import"../chunks/lengthUtils.js";import"../chunks/opacityUtils.js";import"../chunks/uuid.js";import"./support/MediaElementBase.js";import"./support/ControlPointsGeoreference.js";import"../chunks/perspectiveUtils.js";import"../chunks/mat3.js";import"../chunks/mat3f64.js";import"../chunks/vec2.js";import"../chunks/vec2f64.js";import"../geometry/projection.js";import"../chunks/pe.js";import"../chunks/assets.js";import"../chunks/geodesicConstants.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"../chunks/zscale.js";import"../chunks/GeoreferenceBase.js";import"../core/Clonable.js";import"./support/CornersGeoreference.js";import"./support/ExtentAndRotationGeoreference.js";import"../chunks/resourceExtension.js";import"../chunks/collectionUtils.js";import"../core/HandleOwner.js";import"../chunks/WatchUpdatingTracking.js";import"../core/reactiveUtils.js";import"../chunks/BoundsStore.js";import"../chunks/PooledRBush.js";import"../chunks/quickselect.js";import"../chunks/MediaElementView.js";import"../chunks/normalizeUtilsSync.js";import"../chunks/normalizeUtilsCommon.js";function f(e){return"object"==typeof e&&null!=e&&"type"in e}let g=class extends(l(h(j(i(a))))){constructor(e){super(e),this.effectiveSource=null,this.copyright=null,this.operationalLayerType="MediaLayer",this.spatialReference=null,this.type="media",this.source=new y}load(e){const t=this.source;if(!t)return this.addResolvingPromise(Promise.reject(new r("media-layer:source-missing","Set 'MediaLayer.source' before loading the layer."))),Promise.resolve(this);const o=f(t)?new y({elements:new s([t])}):t;this._set("effectiveSource",o),this.spatialReference&&(o.spatialReference=this.spatialReference);const i=o.load(e).then((()=>{this.spatialReference=o.spatialReference}));return this.addResolvingPromise(i),Promise.resolve(this)}destroy(){o(this.effectiveSource)?.destroy(),o(this.source)?.destroy()}get fullExtent(){return this.loaded?this.effectiveSource.fullExtent:null}set source(e){"not-loaded"===this.loadStatus?this._set("source",e):t.getLogger(this.declaredClass).error("#source","source cannot be changed after the layer is loaded.")}castSource(e){return e?Array.isArray(e)?new y({elements:new s(e)}):e instanceof s?new y({elements:e}):e:null}readSource(e,s,r){const t="image"===s.mediaType?new d:"video"===s.mediaType?new k:null;return t?.read(s,r),t}writeSource(e,s,t,o){e&&f(e)&&"image"===e.type?e.write(s,o):o?.messages&&o?.messages?.push(new r("media-layer:unsupported-source","source must be an 'ImageElement'"))}};e([p({readOnly:!0})],g.prototype,"effectiveSource",void 0),e([p({type:String})],g.prototype,"copyright",void 0),e([p({readOnly:!0})],g.prototype,"fullExtent",null),e([p({type:["MediaLayer"]})],g.prototype,"operationalLayerType",void 0),e([p({type:["show","hide"]})],g.prototype,"listMode",void 0),e([p({nonNullable:!0,json:{write:{enabled:!0,allowNull:!1}}})],g.prototype,"source",null),e([n("source")],g.prototype,"castSource",null),e([m("source",["url"])],g.prototype,"readSource",null),e([u("source")],g.prototype,"writeSource",null),e([p()],g.prototype,"spatialReference",void 0),e([p({readOnly:!0})],g.prototype,"type",void 0),g=e([c("esri.layers.MediaLayer")],g);const S=g;export{S as default};
