/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import e from"../core/Error.js";import{h as t}from"./typedArrayUtil.js";import{L as r}from"./Logger.js";import{i,e as s,u as n,a as l}from"./maybe.js";import{a as o}from"./screenUtils.js";import{sqlAnd as a}from"../core/sql.js";import{d as u}from"./diffUtils.js";import{v as d}from"./labelingInfo.js";import{c as p,b as f}from"./enums4.js";import{D as c}from"./color.js";import{b as y}from"./utils19.js";import{g as m}from"./visualVariablesUtils2.js";import{createSymbolSchema as g}from"./createSymbolSchema.js";import{R as b}from"./cimAnalyzer.js";import{_ as x}from"./definitions.js";import"./shapingUtils.js";import"../geometry/Polygon.js";import"./mathUtils.js";import"../geometry/Extent.js";import"./unitUtils.js";import"./alignmentUtils.js";import"./vec2f32.js";import"./number2.js";import"./ExpandedCIM.js";import"../core/urlUtils.js";import"../portal/Portal.js";import"./persistableUrlUtils.js";import"../request.js";import"../portal/PortalQueryParams.js";import{g as v,s as h}from"./rendererUtils.js";import{b as T,c as S}from"./clusterUtils.js";import{t as E}from"./util.js";function I(e){if(!e)return p.NONE;let t=0;for(const r of e)if("size"===r.type){const e=m(r);t|=e,"outline"===r.target&&(t|=e<<4)}else"color"===r.type?t|=p.COLOR:"opacity"===r.type?t|=p.OPACITY:"rotation"===r.type&&(t|=p.ROTATION);return t}function w(e,t){return Math.max(e,t)}x.metrics,new b(0,0,24,24);const F=r.getLogger("esri.views.2d.layers.features.schemaUtils"),z="ValidationError";function V(e,t){let r=0,s=0,n=f.DEFAULT;if(i(e)){if(s=function(e,t){if(!("visualVariables"in e))return 0;if(!e.hasVisualVariables("size"))return 0;const r=e.getVisualVariablesForType("size");if(!r[0])return 0;const i=r[0];if(t&&"cluster_count"===i.field&&"cluster"===t.type)return t.clusterMaxSize;if("outline"===i.target)return 0;if("stops"===i.transformationType)return i.stops.map((e=>e.size)).reduce(w,0);if("clamped-linear"===i.transformationType){let e=-1/0,t=-1/0;return e="number"==typeof i.maxSize?i.maxSize:i.maxSize.stops.map((e=>e.size)).reduce(w,0),t="number"==typeof i.minSize?i.minSize:i.minSize.stops.map((e=>e.size)).reduce(w,0),Math.max(e,t)}return"real-world-size"===i.transformationType?30:void 0}(e,t),"visualVariables"in e&&(r=I(e.visualVariables||[]),"dot-density"===e.type&&(n=f.DOT_DENSITY)),"heatmap"===e.type&&(n=f.HEATMAP),"dictionary"===e.type)return{maxVVSize:s,vvFlags:r,symbologyType:f.DEFAULT};if("pie-chart"===e.type)return{maxVVSize:s,vvFlags:r,symbologyType:f.PIE_CHART};if(n!==f.DOT_DENSITY&&n!==f.HEATMAP){const t=e.getSymbols();"backgroundFillSymbol"in e&&e.backgroundFillSymbol&&t.push(e.backgroundFillSymbol);let r=!0,i=!0;for(const e of t)if("cim"===e.type&&(i=!1),"simple-fill"===e.type||"picture-fill"===e.type){const t=e.outline,s=t&&"none"!==t.style&&"solid"!==t.style,n="simple-fill"===e.type&&"none"!==e.style&&"solid"!==e.style;s&&(r=!1),("picture-fill"===e.type||n||s)&&(i=!1)}r?n=i?f.OUTLINE_FILL_SIMPLE:f.OUTLINE_FILL:i&&(n=f.SIMPLE)}}return{vvFlags:r,maxVVSize:s,symbologyType:n}}let j=null;function O(e){if(t("esri-2d-update-debug")){const t=N(e,!0);console.debug("Created new schema",t),console.debug("Schema diff",u(j,t)),j=t}return N(e)}function N(t,r=!1){try{const s=function(t,r=!1){const s=new Array;return s.push(function(t,r,s=!1){const n={indexCount:0,fields:{}},l="featureReduction"in t?t.featureReduction??void 0:void 0,o=l?"aggregate":"feature";if("sublayers"in t){const r={type:"subtype",subtypeField:t.subtypeField,renderers:{},symbologyType:f.DEFAULT},l={type:"subtype",mapping:{},target:"feature",subtypeField:t.subtypeField},a={type:"subtype",classes:{}},u={type:"symbol",target:"feature",aggregateFields:[],attributes:n,storage:l,mesh:{matcher:r,aggregateMatcher:null,labels:a,sortKey:null}},d=new Set;let p=0;for(const{renderer:u,subtypeCode:c,labelingInfo:y,labelsVisible:m}of t.sublayers){let t=0;"visualVariables"in u&&u.visualVariables&&(u.visualVariables.some((e=>"rotation"!==e.type))&&F.warnOnce("SubtypeGroupLayer currently only supports rotation visualVariables. All other visualVariable types will be ignored."),t=I(u.visualVariables.filter((e=>"size"!==e.type))));const g={symbologyType:f.DEFAULT,vvFlags:t,maxVVSize:0},b=B(n,o,u,g,s),x=D(n,o,u),v=m&&y;if("dictionary"===b.type)throw new e(z,"Dictionary renderer is not supported in subtype layers");if("subtype"===b.type)throw new e(z,"Nested subtype renderers is not supported");if(i(x)&&"subtype"===x.type)throw new e(z,"Nested subtype storage is not supported");if(i(x)&&i(x.attributeMapping))throw new e(z,"Non-visual-variable attributes are not supported in subtype layers");if("heatmap"===b.type)throw new e(z,"Heatmaps are not supported in subtype layers");if("pie-chart"===b.type)throw new e(z,"Pie-charts are not supported in subtype layers");if(d.has(c))throw new e(z,"Subtype codes for sublayers must be unique");d.add(c),r.renderers[c]=b,l.mapping[c]=x,v&&(a.classes[c]=v.map((e=>C(n,e,"feature",p++,g,s))))}return u}if("heatmap"===t.renderer?.type&&"raster"===v()){const{radius:e,fieldOffset:r,field:i}=t.renderer;return{type:"heatmap",aggregateFields:[],attributes:n,target:o,storage:null,mesh:{radius:e,fieldOffset:r,field:P(n,{target:o,field:i,resultType:"numeric"}).field}}}const a=function(t,r,i){const s="featureReduction"in r&&r.featureReduction;if(!s)return{fields:[],labels:[],matcher:void 0,rendererOverride:void 0};const n=[];let l=null,o=E(r.geometryType),a=[],u=null;if(s)switch(s.type){case"selection":return F.error(new e(z,"Mapview does not support `selection` reduction type",s)),{fields:[],labels:[],matcher:void 0,rendererOverride:void 0};case"cluster":case"binning":if(n.push(...s.fields??[]),"cluster"===s.type?o="esriGeometryPoint":"binning"===s.type&&(o="esriGeometryPolygon"),s.renderer&&!s.renderer.authoringInfo?.isAutoGenerated){if("cluster"===s.type){const{renderer:e}=T(s.renderer,s,null);u=e}else u=s.renderer;const e=V(s.renderer,s);l=B(t,"aggregate",s.renderer,e,i),a=s&&s.labelsVisible&&s.labelingInfo||[]}else if("cluster"===s.type){if(u=S(n,r.renderer,s,null,!0),s.symbol){const e=V(u,s);l={type:"simple",symbol:g(s.symbol,e,i),symbologyType:e.symbologyType}}a=s&&s.labelsVisible&&s.labelingInfo||[]}}return function(e,t){const r={mesh:!0,storage:!0};for(const i of t){const{name:t,onStatisticField:s,onStatisticExpression:n,statisticType:l}=i;let o,a;const u="numeric",d="feature";n?a=A(e,{type:"expression",target:d,valueExpression:n.expression,resultType:u}).fieldIndex:o=A(e,{type:"field",target:d,field:s,resultType:u}).field,A(e,{type:"statistic",target:"aggregate",name:t,context:r,inField:o,inFieldIndex:a,statisticType:l})}}(t,n),{labels:d(a,"binning"===s.type?"esriGeometryPolygon":o),matcher:l,fields:n,rendererOverride:u}}(n,t,s),u=E(t.geometryType),p=a.rendererOverride??t.renderer,c=V(p,l),y=B(n,o,p,c,s),m=D(n,o,p),b=function(t,r,s,n){if(i(n))return null;if(i(r)&&r.length){r.length>1&&F.warn(`Layer rendering currently only supports ordering by 1 orderByInfo, but found ${r.length}. All but the first will be discarded`);const i=r[0],s="ascending"===i.order?"asc":"desc";return i.field?{field:i.field,order:s}:i.valueExpression?{fieldIndex:A(t,{type:"expression",target:"feature",valueExpression:i.valueExpression,resultType:"numeric"}).fieldIndex,order:s}:(F.error(new e(z,"Expected to find a field or valueExpression for OrderByInfo",i)),null)}return i(s)&&"unique-value"===s.type&&s.orderByClassesEnabled?{byRenderer:!0,order:"asc"}:null}(n,t.orderBy,t.renderer,l),x=t.labelsVisible&&t.labelingInfo||[],h=d(x,u);let w=0;const j=[...h.map((e=>C(n,e,"feature",w++,c,s))),...a.labels.map((e=>C(n,e,"aggregate",w++,c,s)))];return{type:"symbol",target:o,attributes:n,aggregateFields:a.fields,storage:m,mesh:{matcher:y,labels:{type:"simple",classes:j},aggregateMatcher:a.matcher,sortKey:b}}}(t,0,r)),s}(t,r),l=function(e){return"heatmap"===e.renderer?.type&&"raster"===v()?{type:"heatmap"}:{type:"symbol"}}(t),u={};s.map((r=>function(t,r,i){switch(i.target){case"feature":return void L(t,U(r),i);case"aggregate":{if(!("featureReduction"in r))return;const s=r.featureReduction;switch(s?.type){case"selection":throw new e(z,"Mapview does not support `selection` reduction type",s);case"binning":return L(t,U(r),i),void function(e,t,r,i){e.aggregate||(e.aggregate={name:"aggregate",type:"bin",filters:null,input:"feature",params:{fixedBinLevel:t.fixedBinLevel,fields:(t.fields??[]).map((e=>({...e.toJSON(),type:R(e,r)})))},attributes:{}}),M(e.aggregate,i.attributes.fields)}(t,s,r.fields.map((e=>e.toJSON())),i);case"cluster":return L(t,U(r),i),void function(e,t,r,i){e.aggregate||(e.aggregate={name:"aggregate",type:"cluster",input:"feature",filters:null,attributes:{},params:{clusterRadius:o(t.clusterRadius/2),clusterPixelBuffer:64*Math.ceil(o(t.clusterMaxSize)/64),fields:(t.fields??[])?.map((e=>({...e.toJSON(),type:R(e,r)})))}}),M(e.aggregate,i.attributes.fields)}(t,s,r.fields.map((e=>e.toJSON())),i)}}}}(u,t,r)));const p=i(t.subtypeCode)?`${t.subtypeField} = ${t.subtypeCode}`:null;return{source:{definitionExpression:n(a(t.definitionExpression,p)),fields:t.fields.map((e=>e.toJSON())),gdbVersion:t.gdbVersion,historicMoment:t.historicMoment?.getTime(),outFields:t.availableFields,pixelBuffer:t.pixelBuffer,spatialReference:t.spatialReference.toJSON(),timeExtent:t.timeExtent?.toJSON(),customParameters:t.customParameters},attributes:{fields:{},indexCount:0},processors:s,tileRenderer:l,targets:u}}catch(e){if(e.fieldName===z)return F.error(e),null;throw e}}function M(e,t){for(const r in t){const i=t[r];if(i.target!==e.name)continue;const s=e.attributes[r];if(s?.context){const e=s.context;e.mesh=e.mesh||i.context?.mesh,e.storage=e.storage||i.context?.storage}else e.attributes[r]=i}return e}function U(e){return[n(e.filter)?.toJSON()??null,n(n(e.featureEffect)?.filter)?.toJSON()??null]}function L(e,t,r){return e.feature||(e.feature={name:"feature",input:"source",filters:t,attributes:{}}),M(e.feature,r.attributes.fields),e}function R(t,r){const{onStatisticExpression:i,onStatisticField:s,statisticType:n}=t;switch(n){case"min":case"max":case"avg":case"avg_angle":case"sum":case"count":return"esriFieldTypeDouble";case"mode":{if(i){const{returnType:r}=i;return r?"string"===r?"esriFieldTypeString":"esriFieldTypeDouble":(F.error(new e(z,"Unable to infer type of aggregateField with onStatisticExpression. ReturnType is not defined",t)),"esriFieldTypeString")}const n=r.find((e=>e.name===s));return n?n.type:(F.error(new e(z,"Unable to infer type of aggregateField with onStatisticExpression. ReturnType is not defined",t)),"esriFieldTypeString")}}}function P(e,t){return t.field?A(e,{...t,type:"field",field:t.field}):t.valueExpression?A(e,{...t,type:"expression",valueExpression:t.valueExpression}):{field:void 0,fieldIndex:void 0}}function A(e,t){switch(t.type){case"expression":{const r=t.valueExpression;if(!e.fields[r]){const i=e.indexCount++;e.fields[r]={...t,name:r,fieldIndex:i}}return{fieldIndex:e.fields[r].fieldIndex}}case"label-expression":{const r=JSON.stringify(t.label);if(!e.fields[r]){const i=e.indexCount++;e.fields[r]={...t,name:r,fieldIndex:i}}return{fieldIndex:e.fields[r].fieldIndex}}case"field":{const r=t.field;return"aggregate"===t.target&&e.fields[r]||(e.fields[r]={...t,name:r}),{field:r}}case"statistic":return e.fields[t.name]={...t},{field:t.name}}}function C(e,t,r,i,s,n=!1){const l=A(e,{type:"label-expression",target:r,context:{mesh:!0},resultType:"string",label:{labelExpression:t.labelExpression,labelExpressionInfo:t.labelExpressionInfo?{expression:t.labelExpressionInfo.expression}:null,symbol:!!t.symbol,where:t.where}}),{fieldIndex:o}=l;return{...g(t,s,n),fieldIndex:o,target:r,index:i}}function D(e,t,r){let s;switch(r.type){case"simple":case"class-breaks":case"unique-value":case"dictionary":s={visualVariables:!0,attributes:null};break;default:s=y(r).getStorageSpec(r)}return function(e,t,r,s){if(l(r))return null;const{visualVariables:n,attributes:o}=r;let a=null;n&&"visualVariables"in s&&(a=function(e,t,r){if(!r||!r.length)return[];const s={storage:!0},n="numeric";return h(r).map((r=>{const i=c(r.type),{field:l,fieldIndex:o}=P(e,{target:t,valueExpression:r.valueExpression,field:r.field,context:s,resultType:n});switch(r.type){case"size":return"$view.scale"===r.valueExpression?null:{type:"size",binding:i,field:l,fieldIndex:o,normalizationField:P(e,{target:t,field:r.normalizationField,context:s,resultType:n}).field,valueRepresentation:r.valueRepresentation??null};case"color":return{type:"color",binding:i,field:l,fieldIndex:o,normalizationField:P(e,{target:t,field:r.normalizationField,context:s,resultType:n}).field};case"opacity":return{type:"opacity",binding:i,field:l,fieldIndex:o,normalizationField:P(e,{target:t,field:r.normalizationField,context:s,resultType:n}).field};case"rotation":return{type:"rotation",binding:i,field:l,fieldIndex:o}}})).filter(i)}(e,t,s.visualVariables));const u=i(a)?4:0;let d=null;return i(o)&&(d=o.map(((r,i)=>{const{field:s,fieldIndex:n}=P(e,{valueExpression:r.valueExpression,field:r.field,resultType:"numeric",target:t});return{binding:i+u,field:s,fieldIndex:n}}))),{type:"simple",target:t,attributeMapping:d,vvMapping:a}}(e,t,s,r)}function B(t,r,i,n,l=!1){const o=s(t,{indexCount:0,fields:{}});switch(i.type){case"simple":case"dot-density":return function(e,t,r,i=!1){const s=t.getSymbols(),n=s.length?s[0]:null;return{type:"simple",symbol:g(n,r,i),symbologyType:r.symbologyType}}(0,i,n,l);case"class-breaks":return function(e,t,r,i,s=!1){const n=r.backgroundFillSymbol,{field:l,fieldIndex:o}=P(e,{target:t,field:r.field,valueExpression:r.valueExpression,resultType:"numeric",context:{mesh:!0,use:"renderer.field"}}),a=r.normalizationType,u="log"===a?"esriNormalizeByLog":"percent-of-total"===a?"esriNormalizeByPercentOfTotal":"field"===a?"esriNormalizeByField":null,d=r.classBreakInfos.map((e=>({symbol:g(e.symbol,i,s),min:e.minValue,max:e.maxValue}))).sort(((e,t)=>e.min-t.min));return{type:"interval",attributes:e.fields,field:l,fieldIndex:o,backgroundFillSymbol:g(n,i,s),defaultSymbol:g(r.defaultSymbol,i,s),intervals:d,normalizationField:r.normalizationField,normalizationTotal:r.normalizationTotal,normalizationType:u,isMaxInclusive:r.isMaxInclusive,symbologyType:i.symbologyType}}(o,r,i,n,l);case"unique-value":return function(t,r,i,s,n=!1){const l=[],o=i.backgroundFillSymbol,a={target:r,context:{mesh:!0},resultType:"string"};if(i.field&&"string"!=typeof i.field)throw new e(z,"Expected renderer.field to be a string",i);const{field:u,fieldIndex:d}=P(t,{...a,field:i.field,valueExpression:i.valueExpression});for(const e of i.uniqueValueInfos??[])l.push({value:""+e.value,symbol:g(e.symbol,s,n)});return{type:"map",attributes:t.fields,field:u,fieldIndex:d,field2:P(t,{...a,field:i.field2}).field,field3:P(t,{...a,field:i.field3}).field,fieldDelimiter:i.fieldDelimiter??void 0,backgroundFillSymbol:g(o,s),defaultSymbol:g(i.defaultSymbol,s),map:l,symbologyType:s.symbologyType}}(o,r,i,n,l);case"dictionary":return function(e,t,r,i=!1){return{type:"dictionary",config:t.config,fieldMap:t.fieldMap,scaleExpression:t.scaleExpression,url:t.url,symbolOptions:r,symbologyType:r.symbologyType}}(0,i,n,l);case"heatmap":return function(e,t,r,i=!1){const s=t.getSymbols(),n=s.length?s[0]:null;return{type:"heatmap",symbol:g(n,r,i),symbologyType:r.symbologyType}}(0,i,n,l);case"pie-chart":return function(e,t,r,i=!1){const s=t.getSymbols(),n=s[0],l=s.length>1?s[1]:null;return{type:"pie-chart",markerSymbol:g(n,r,i),fillSymbol:g(l,r,i),symbologyType:r.symbologyType}}(0,i,n,l)}}export{B as a,O as b,V as c};
