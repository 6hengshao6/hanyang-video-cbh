/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{a as e,i as t,e as r,u as s}from"./maybe.js";import{tryProjectWithZConversion as o}from"../geometry/projection.js";import{g as i}from"./ElevationProvider.js";import{j as a,f as n}from"./mat4.js";import{c as l}from"./mat4f64.js";import{s as m,Z as h,e as p,d as c}from"./vec3.js";import{f as d,d as u}from"./vec4f64.js";import{V as f}from"./VisualElement.js";import{W as _,U as g,O as y,R as w}from"./TriangleMaterial.js";import{l as C,c as P}from"./line.js";import{R as v}from"./Material.js";function j(s,a,n,l=!1){const m=o(s,a);return e(m)?null:(m.hasZ&&!l||!t(n)||(m.z=r(i(n,m),0)),m)}function b(e,t,r){r.warnOnce(`Failed to project analysis geometry (id: '${e.id}'), projection from spatial reference (wkid: '${t.wkid}') to view spatial reference is not supported. Projection may be possible after calling projection.load().`)}class R extends f{constructor(e){super(e.view),this._resources=null,this._transform=l()}get object(){return t(this._resources)?this._resources.object:null}get transform(){return this._transform}set transform(e){a(this._transform,e),t(this._resources)&&(this._resources.object.transformation=this._transform)}recreate(){this.attached&&this.createResources()}recreateGeometry(){if(e(this._resources))return;const t=this._resources.object,r=this.view._stage;r.removeMany(t.geometries),t.removeAllGeometries(),this.createGeometries(t),t.visible=this.visible,r.addMany(t.geometries)}createResources(){this.destroyResources();const e=this.view._stage;if(!e)return;const t=new _({pickable:!1,updatePolicy:g.SYNC});e.add(t);const r=new y({castShadow:!1});r.transformation=this._transform,this.createExternalResources(),this.createGeometries(r),e.addMany(r.geometries),this.forEachExternalMaterial((t=>e.add(t))),e.add(r),t.add(r),r.visible=this.visible,this._resources={layer:t,object:r}}destroyResources(){const t=this.view._stage;!e(this._resources)&&t&&(t.remove(this._resources.object),t.remove(this._resources.layer),this.forEachExternalMaterial((e=>{t.remove(e),e.dispose()})),t.removeMany(this._resources.object.geometries),this._resources.object.dispose(),this.destroyExternalResources(),this._resources=null)}updateVisibility(t){e(this._resources)||(this._resources.object.visible=t)}}class E extends R{constructor(e,r){super(e),this._hasExternalMaterial=!1,this._hasExternalMaterial=t(r),this._material=t(r)?r:new w({width:1,color:d(1,0,1,1),stippleOffColor:null,stipplePattern:null,stipplePreferContinuous:!0,isClosed:!1,falloff:0,innerColor:null,innerWidth:1,hasPolygonOffset:!1,renderOccluded:v.OccludeAndTransparent,writeDepth:!0}),this.applyProps(e)}setGeometryFromRenderSpacePoint(e,t=1e3){this.geometry=[[[e[0]-t,e[1],e[2]],[e[0]+t,e[1],e[2]]],[[e[0],e[1]-t,e[2]],[e[0],e[1]+t,e[2]]],[[e[0],e[1],e[2]-t],[e[0],e[1],e[2]+t]]]}setGeometryFromExtent(e){const t=this.view.spatialReference,r=c(),s=c(),o=100,i=[];m(r,e[0],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),i.push([s[0],s[1],s[2]]),m(r,e[2],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),i.push([s[0],s[1],s[2]]),m(r,e[2],e[3],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),i.push([s[0],s[1],s[2]]),m(r,e[0],e[3],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),i.push([s[0],s[1],s[2]]),m(r,e[0],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),i.push([s[0],s[1],s[2]]),m(r,e[0],e[1],o),this.view.renderCoordsHelper.toRenderCoords(r,t,s),i.push([s[0],s[1],s[2]]),this.geometry=[i]}setGeometryFromFrustum(e){const t=[];e.lines.forEach((e=>{t.push([e.origin[0],e.origin[1],e.origin[2]]),t.push([e.endpoint[0],e.endpoint[1],e.endpoint[2]])})),this.geometry=[t]}setGeometryFromBoundedPlane(e){const t=[],r=e.origin,s=e.basis1,o=e.basis2,i=.5,a=c(),n=c(),l=c(),m=c();a[0]=r[0]-s[0]*i-o[0]*i,a[1]=r[1]-s[1]*i-o[1]*i,a[2]=r[2]-s[2]*i-o[2]*i,n[0]=r[0]-s[0]*i+o[0]*i,n[1]=r[1]-s[1]*i+o[1]*i,n[2]=r[2]-s[2]*i+o[2]*i,l[0]=r[0]+s[0]*i+o[0]*i,l[1]=r[1]+s[1]*i+o[1]*i,l[2]=r[2]+s[2]*i+o[2]*i,m[0]=r[0]+s[0]*i-o[0]*i,m[1]=r[1]+s[1]*i-o[1]*i,m[2]=r[2]+s[2]*i-o[2]*i,t.push([a[0],a[1],a[2]]),t.push([n[0],n[1],n[2]]),t.push([l[0],l[1],l[2]]),t.push([m[0],m[1],m[2]]),t.push([a[0],a[1],a[2]]),this.geometry=[t]}setGeometryFromSegment(e){const t=e.endRenderSpace;this.transform=n(O,t);const{points:r}=e.createRenderGeometry(t,this.view.renderCoordsHelper);this.geometry=[r]}setGeometryFromSegments(e,t=h){this.transform=n(O,t),this.geometry=e.map((e=>e.createRenderGeometry(t,this.view.renderCoordsHelper).points))}getTransformedGeometry(){return e(this._geometry)?null:this._geometry.map((e=>e.map((e=>p(c(),e,this.transform)))))}get renderOccluded(){return this._material.parameters.renderOccluded}set renderOccluded(e){this._material.setParameters({renderOccluded:e})}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get width(){return this._material.parameters.width}set width(e){this._material.setParameters({width:e})}get color(){return this._material.parameters.color}set color(e){this._material.setParameters({color:u(e)})}get innerWidth(){return this._material.parameters.innerWidth}set innerWidth(e){this._material.setParameters({innerWidth:e})}get innerColor(){return this._material.parameters.innerColor}set innerColor(e){this._material.setParameters({innerColor:t(e)?u(e):null})}get stipplePattern(){return this._material.parameters.stipplePattern}set stipplePattern(e){t(this._material)&&this._material.setParameters({stipplePattern:e})}get stippleOffColor(){return this._material.parameters.stippleOffColor}set stippleOffColor(e){this._material.setParameters({stippleOffColor:t(e)?u(e):null})}get stipplePreferContinuous(){return this._material.parameters.stipplePreferContinuous}set stipplePreferContinuous(e){this._material.setParameters({stipplePreferContinuous:e})}get writeDepthEnabled(){return this._material.parameters.writeDepth}set writeDepthEnabled(e){this._material.setParameters({writeDepth:e})}get falloff(){return this._material.parameters.falloff}set falloff(e){this._material.setParameters({falloff:e})}get polygonOffset(){return this._material.parameters.hasPolygonOffset}set polygonOffset(e){this._material.setParameters({hasPolygonOffset:e})}createExternalResources(){}destroyExternalResources(){}createGeometries(e){for(const t of C(this.geometry)){const r=P(s(this._material),t);e.addGeometry(r)}}forEachExternalMaterial(e){this._hasExternalMaterial||e(s(this._material))}}const O=l();export{E as L,R as O,j as a,b as l};
