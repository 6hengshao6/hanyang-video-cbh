/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{h as t}from"./typedArrayUtil.js";import{i as e}from"./mathUtils.js";import{i as r,a as i,u as o}from"./maybe.js";import a from"../core/Error.js";import{L as s}from"./Logger.js";import{C as n}from"./context-util.js";import{T as l,c as h,b as p,R as _,a as m,P as d,S as u,C as c}from"./enums3.js";const E=s.getLogger("esri.views.webgl.checkWebGLError"),g=!!t("enable-feature:webgl-debug");function T(){return g}function x(){return g}function f(t){if(T()){const e=t.getError();if(e){const r=function(t,e){switch(e){case t.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case t.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case t.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case t.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case t.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case t.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}(t,e),i=(new Error).stack;E.error(new a("webgl-error","WebGL error occured",{message:r,stack:i}))}}}const M={target:l.TEXTURE_2D,samplingMode:h.LINEAR,wrapMode:p.REPEAT,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,isImmutable:!1};let A=class{constructor(t,e,r=null){this._context=t,this.type="texture",this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,t.instanceCounter.increment(_.Texture,this),this._descriptor={...M,...e};for(const t in M)void 0===this._descriptor[t]&&(this._descriptor[t]=M[t]);if(t.type!==n.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),R(this._descriptor.target)))throw new Error("3D and array textures are not supported in WebGL1");this._descriptor.target===l.TEXTURE_CUBE_MAP?this._setDataCubeMap(r):this.setData(r)}get glName(){return this._glName}get descriptor(){return this._descriptor}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._context.gl&&this._glName&&(this._context.unbindTexture(this),this._context.gl.deleteTexture(this._glName),this._glName=null,this._context.instanceCounter.decrement(_.Texture,this))}release(){this.dispose()}resize(t,e){const r=this._descriptor;if(r.width!==t||r.height!==e){if(this._wasImmutablyAllocated)throw new Error("Immutable textures can't be resized!");r.width=t,r.height=e,this._descriptor.target===l.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(t=null){for(let e=l.TEXTURE_CUBE_MAP_POSITIVE_X;e<=l.TEXTURE_CUBE_MAP_NEGATIVE_Z;e++)this._setData(t,e)}setData(t){this._setData(t)}_setData(t,e){if(!this._context||!this._context.gl)return;const i=this._context.gl;this._glName||(this._glName=i.createTexture()),void 0===t&&(t=null);const o=this._descriptor,a=e??o.target,s=R(a);null===t&&(o.width=o.width||4,o.height=o.height||4,s&&(o.depth=o.depth??1));const n=this._context.bindTexture(this,A.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(A.TEXTURE_UNIT_FOR_UPDATES),A._validateTexture(this._context,o),this._configurePixelStorage(),f(i);const l=o.pixelFormat;let h=o.internalFormat??this._deriveInternalFormat(l,o.dataType);if(I(t)){let e=t.width,r=t.height;const n=1;t instanceof HTMLVideoElement&&(e=t.videoWidth,r=t.videoHeight),o.width&&o.height,s&&o.depth,o.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,h,o.hasMipmap,e,r,n),this._texImage(a,0,h,e,r,n,t),f(i),o.hasMipmap&&this.generateMipmap(),void 0===o.width&&(o.width=e),void 0===o.height&&(o.height=r),s&&void 0===o.depth&&(o.depth=n)}else{const{width:e,height:n,depth:l}=o;if(null==e||null==n)throw new Error("Width and height must be specified!");if(s&&null==l)throw new Error("Depth must be specified!");if(o.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,h,o.hasMipmap,e,n,l),i.DEPTH24_STENCIL8&&h===i.DEPTH_STENCIL&&(h=i.DEPTH24_STENCIL8),w(t)){const s=t.levels,p=b(a,e,n,l),_=Math.min(p-1,s.length-1);r(this._context.gl2)?i.texParameteri(o.target,this._context.gl2.TEXTURE_MAX_LEVEL,_):o.hasMipmap=o.hasMipmap&&p===s.length;const m=h;if(!(m in c))throw new Error("Attempting to use compressed data with an umcompressed format!");this._forEachMipmapLevel(((t,e,r,i)=>{const o=s[Math.min(t,s.length-1)];this._compressedTexImage(a,t,m,e,r,i,o)}),_)}else r(t)?(this._texImage(a,0,h,e,n,l,t),f(i),o.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel(((t,e,r,o)=>{this._texImage(a,t,h,e,r,o,null),f(i)}))}A._applySamplingMode(i,this._descriptor),A._applyWrapMode(i,this._descriptor),A._applyAnisotropicFilteringParameters(this._context,this._descriptor),f(i),this._context.bindTexture(n,A.TEXTURE_UNIT_FOR_UPDATES)}updateData(t,e,o,a,s,n,l=0){n||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const h=this._context.gl,p=this._descriptor,{pixelFormat:_,dataType:m,target:d,isImmutable:u}=p,c=p.internalFormat??this._deriveInternalFormat(_,m);if(u&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");const E=this._context.bindTexture(this,A.TEXTURE_UNIT_FOR_UPDATES,!0);if((e<0||o<0||a>p.width||s>p.height||e+a>p.width||o+s>p.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),l){if(i(this._context.gl2))return void console.error("Webgl2 must be enabled to use dataRowOffset!");h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS,l)}if(I(n)?r(this._context.gl2)?this._context.gl2.texSubImage2D(d,t,e,o,a,s,_,m,n):h.texSubImage2D(d,t,e,o,_,m,n):w(n)?h.compressedTexSubImage2D(d,t,e,o,a,s,c,n.levels[t]):h.texSubImage2D(d,t,e,o,a,s,_,m,n),l){if(i(this._context.gl2))return void console.error("Webgl2 must be enabled to use dataRowOffset!");h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS,0)}this._context.bindTexture(E,A.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(t,e,r,o,a,s,n,l){l||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const h=this._context.gl2;if(i(h))throw new Error("3D textures are not supported in WebGL1");const p=this._descriptor,{pixelFormat:_,dataType:m,isImmutable:d,target:u}=p,c=p.internalFormat??this._deriveInternalFormat(_,m);if(d&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");R(u)||console.warn("Attempting to set 3D texture data on a non-3D texture");const E=this._context.bindTexture(this,A.TEXTURE_UNIT_FOR_UPDATES);if(this._context.setActiveTexture(A.TEXTURE_UNIT_FOR_UPDATES),(e<0||r<0||o<0||a>p.width||s>p.height||n>p.depth||e+a>p.width||r+s>p.height||o+n>p.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),w(l))l=l.levels[t],h.compressedTexSubImage3D(u,t,e,r,o,a,s,n,c,l);else{const i=l;h.texSubImage3D(u,t,e,r,o,a,s,n,_,m,i)}this._context.bindTexture(E,A.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new Error("Cannot add mipmaps to immutable texture after allocation");t.hasMipmap=!0,this._samplingModeDirty=!0,A._validateTexture(this._context,t)}t.samplingMode===h.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=h.LINEAR_MIPMAP_NEAREST):t.samplingMode===h.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=h.NEAREST_MIPMAP_NEAREST);const e=this._context.bindTexture(this,A.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(A.TEXTURE_UNIT_FOR_UPDATES),this._context.gl.generateMipmap(t.target),this._context.bindTexture(e,A.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(t){t!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=t,this._samplingModeDirty=!0)}setWrapMode(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,A._validateTexture(this._context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const t=this._context.gl,e=this._descriptor;this._samplingModeDirty&&(A._applySamplingMode(t,e),this._samplingModeDirty=!1),this._wrapModeDirty&&(A._applyWrapMode(t,e),this._wrapModeDirty=!1)}_deriveInternalFormat(t,e){if(this._context.type===n.WEBGL1)return t;switch(e){case m.FLOAT:switch(t){case d.RGBA:return u.RGBA32F;case d.RGB:return u.RGB32F;default:throw new Error("Unable to derive format")}case m.UNSIGNED_BYTE:switch(t){case d.RGBA:return u.RGBA8;case d.RGB:return u.RGB8}default:return t}}_configurePixelStorage(){const t=this._context.gl,{unpackAlignment:e,flipped:r,preMultiplyAlpha:i}=this._descriptor;t.pixelStorei(t.UNPACK_ALIGNMENT,e),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,r?1:0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_texStorage(t,e,r,o,a,s){const n=this._context.gl2;if(i(n))throw new Error("Immutable textures are not supported in WebGL1");if(!(e in u))throw new Error("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const l=r?b(t,o,a,s):1;if(R(t)){if(null==s)throw new Error("Missing depth dimension for 3D texture upload");n.texStorage3D(t,l,e,o,a,s)}else n.texStorage2D(t,l,e,o,a);this._wasImmutablyAllocated=!0}_texImage(t,e,i,a,s,l,h){const p=this._context.gl;let _=null;const m=this._context.type===n.WEBGL2,d=R(t),{isImmutable:u,pixelFormat:c,dataType:E}=this._descriptor;if(m&&(_=p),m||!I(h))if(u){if(r(h)){const r=h;if(d){if(null==l)throw new Error("Missing depth dimension for 3D texture upload");_.texSubImage3D(t,e,0,0,0,a,s,l,c,E,r)}else p.texSubImage2D(t,e,0,0,a,s,c,E,r)}}else{const r=o(h);if(d){if(null==l)throw new Error("Missing depth dimension for 3D texture upload");_.texImage3D(t,e,i,a,s,l,0,c,E,r)}else p.texImage2D(t,e,i,a,s,0,c,E,r)}else p.texImage2D(t,0,i,c,E,h)}_compressedTexImage(t,e,i,o,a,s,l){const h=this._context.gl;let p=null;const _=R(t),m=this._descriptor.isImmutable;if(_){if(this._context.type!==n.WEBGL2)throw new Error("3D textures are not supported in WebGL1");p=h}if(m){if(r(l))if(_){if(null==s)throw new Error("Missing depth dimension for 3D texture upload");p.compressedTexSubImage3D(t,e,0,0,0,o,a,s,i,l)}else h.compressedTexSubImage2D(t,e,0,0,o,a,i,l)}else if(_){if(null==s)throw new Error("Missing depth dimension for 3D texture upload");p.compressedTexImage3D(t,e,i,o,a,s,0,l)}else h.compressedTexImage2D(t,e,i,o,a,0,l)}_forEachMipmapLevel(t,e=1/0){let{width:r,height:i,depth:o,hasMipmap:a,target:s}=this._descriptor;const n=s===l.TEXTURE_3D;if(null==r||null==i||n&&null==o)throw new Error("Missing texture dimensions for mipmap calculation");for(let s=0;t(s,r,i,o),a&&(1!==r||1!==i||n&&1!==o)&&!(s>=e);++s)r=Math.max(1,r>>1),i=Math.max(1,i>>1),n&&(o=Math.max(1,o>>1))}static _validateTexture(t,r){(null!=r.width&&r.width<0||null!=r.height&&r.height<0||null!=r.depth&&r.depth<0)&&console.error("Negative dimension parameters are not allowed!");const i=t.type===n.WEBGL2,o=null!=r.width&&e(r.width)&&null!=r.height&&e(r.height);i||!r.isImmutable&&!R(r.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),i||o||("number"==typeof r.wrapMode?r.wrapMode!==p.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):r.wrapMode.s===p.CLAMP_TO_EDGE&&r.wrapMode.t===p.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),r.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))}static _applySamplingMode(t,e){let r=e.samplingMode,i=e.samplingMode;r===h.LINEAR_MIPMAP_NEAREST||r===h.LINEAR_MIPMAP_LINEAR?(r=h.LINEAR,e.hasMipmap||(i=h.LINEAR)):r!==h.NEAREST_MIPMAP_NEAREST&&r!==h.NEAREST_MIPMAP_LINEAR||(r=h.NEAREST,e.hasMipmap||(i=h.NEAREST)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,r),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,i)}static _applyWrapMode(t,e){"number"==typeof e.wrapMode?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}static _applyAnisotropicFilteringParameters(t,e){const r=t.capabilities.textureFilterAnisotropic;r&&t.gl.texParameterf(e.target,r.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}};function w(t){return r(t)&&"type"in t&&"compressed"===t.type}function I(t){return r(t)&&!w(t)&&!function(t){return r(t)&&"byteLength"in t}(t)}function R(t){return t===l.TEXTURE_3D||t===l.TEXTURE_2D_ARRAY}function b(t,e,r,i=1){let o=Math.max(e,r);return t===l.TEXTURE_3D&&(o=Math.max(o,i)),Math.round(Math.log(o)/Math.LN2)+1}A.TEXTURE_UNIT_FOR_UPDATES=0;export{A as T,x as a,f as c,T as w};
