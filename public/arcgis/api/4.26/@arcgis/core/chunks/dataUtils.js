/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import"../geometry.js";import{h as t,R as e}from"./typedArrayUtil.js";import{L as n}from"./Logger.js";import{d as r}from"./mathUtils.js";import{a as o,i as a}from"./maybe.js";import{throwIfAborted as l}from"../core/promiseUtils.js";import{h as i}from"./unitUtils.js";import s from"../geometry/Extent.js";const c=n.getLogger("esri.views.2d.engine.flow.dataUtils"),f=10;async function h(n,r,o,a){const i=performance.now(),s=function(t,e){const n=function(t,e,n,r){if(0===r)return t;const o=Math.round(3*r),a=new Array(2*o+1);let l=0;for(let t=-o;t<=o;t++){const e=Math.exp(-t*t/(r*r));a[t+o]=e,l+=e}for(let t=-o;t<=o;t++)a[t+o]/=l;const i=new Float32Array(t.length);for(let r=0;r<n;r++)for(let n=0;n<e;n++){let l=0,s=0;for(let i=-o;i<=o;i++){if(n+i<0||n+i>=e)continue;const c=a[i+o];l+=c*t[2*(r*e+(n+i))],s+=c*t[2*(r*e+(n+i))+1]}i[2*(r*e+n)]=l,i[2*(r*e+n)+1]=s}const s=new Float32Array(t.length);for(let t=0;t<e;t++)for(let r=0;r<n;r++){let l=0,c=0;for(let s=-o;s<=o;s++){if(r+s<0||r+s>=n)continue;const f=a[s+o];l+=f*i[2*((r+s)*e+t)],c+=f*i[2*((r+s)*e+t)+1]}s[2*(r*e+t)]=l,s[2*(r*e+t)+1]=c}return s}(e.data,e.width,e.height,t.smoothing);return t.interpolate?(t,r)=>{const o=Math.floor(t),a=Math.floor(r);if(o<0||o>=e.width)return[0,0];if(a<0||a>=e.height)return[0,0];const l=t-o,i=r-a,s=o,c=a,f=o<e.width-1?o+1:o,h=a<e.height-1?a+1:a,u=n[2*(c*e.width+s)],m=n[2*(c*e.width+f)],d=n[2*(h*e.width+s)],w=n[2*(h*e.width+f)],p=n[2*(c*e.width+s)+1],g=n[2*(c*e.width+f)+1];return[(u*(1-i)+d*i)*(1-l)+(m*(1-i)+w*i)*l,(p*(1-i)+n[2*(h*e.width+s)+1]*i)*(1-l)+(g*(1-i)+n[2*(h*e.width+f)+1]*i)*l]}:(t,r)=>{const o=Math.round(t),a=Math.round(r);return o<0||o>=e.width||a<0||a>=e.height?[0,0]:[n[2*(a*e.width+o)],n[2*(a*e.width+o)+1]]}}(r,o),h=performance.now(),m=function(t,n,r,o){const a=[],l=new e,i=1/Math.max(t.lineCollisionWidth,1),s=Math.round(r*i),c=Math.round(o*i),f=new Int32Array(s*c);for(let t=0;t<f.length;t++)f[t]=-1;const h=[];for(let e=0;e<o;e+=t.lineSpacing)for(let n=0;n<r;n+=t.lineSpacing)h.push({x:n,y:e,sort:l.getFloat()});h.sort(((t,e)=>t.sort-e.sort));for(const{x:e,y:r}of h)if(l.getFloat()<t.density){const o=u(t,n,e,r,a.length,f,s,c,i);if(o.length<2)continue;a.push(o)}return a}(r,s,o.width,o.height),d=performance.now(),w=function(t,n){const r=new e,o=t.reduce(((t,e)=>t+e.length),0),a=new Float32Array(4*o),l=new Array(t.length);let i=0,s=0;for(const e of t){const t=i;for(const t of e)a[4*i]=t.x,a[4*i+1]=t.y,a[4*i+2]=t.t,a[4*i+3]=t.speed,i++;l[s++]={startVertex:t,numberOfVertices:e.length,totalTime:e[e.length-1].t,timeSeed:r.getFloat()}}return{lineVertices:a,lineDescriptors:l}}(m),p=performance.now(),g="Streamlines"===n?function(t,e){const n=9,{lineVertices:r,lineDescriptors:o}=t;let a=0,l=0;for(const t of o)a+=2*t.numberOfVertices,l+=6*(t.numberOfVertices-1);const i=new Float32Array(a*n),s=new Uint32Array(l);let c=0,f=0;function h(t,e,r,o,a,l,s,f){const h=c*n;let u=0;i[h+u++]=t,i[h+u++]=e,i[h+u++]=1,i[h+u++]=r,i[h+u++]=l,i[h+u++]=s,i[h+u++]=o/2,i[h+u++]=a/2,i[h+u++]=f,c++,i[h+u++]=t,i[h+u++]=e,i[h+u++]=-1,i[h+u++]=r,i[h+u++]=l,i[h+u++]=s,i[h+u++]=-o/2,i[h+u++]=-a/2,i[h+u++]=f,c++}for(const t of o){const{totalTime:n,timeSeed:o}=t;let a=null,l=null,i=null,u=null,m=null,d=null;for(let w=0;w<t.numberOfVertices;w++){const p=r[4*(t.startVertex+w)],g=r[4*(t.startVertex+w)+1],y=r[4*(t.startVertex+w)+2],x=r[4*(t.startVertex+w)+3];let M=null,A=null,I=null,V=null;if(w>0){M=p-a,A=g-l;const t=Math.sqrt(M*M+A*A);if(M/=t,A/=t,w>1){let t=M+m,n=A+d;const r=Math.sqrt(t*t+n*n);t/=r,n/=r;const o=Math.min(1/(t*M+n*A),e);t*=o,n*=o,I=-n,V=t}else I=-A,V=M;null!==I&&null!==V&&(h(a,l,i,I,V,n,o,x),s[f++]=c-2,s[f++]=c,s[f++]=c-1,s[f++]=c,s[f++]=c+1,s[f++]=c-1)}a=p,l=g,i=y,m=M,d=A,u=x}h(a,l,i,-d,m,n,o,u)}return{vertexData:i,indexData:s}}(w,f):function(t){const e=16,n=1,r=2,{lineVertices:o,lineDescriptors:a}=t;let l=0,i=0;for(const t of a){const e=t.numberOfVertices-1;l+=4*e*2,i+=6*e*2}const s=new Float32Array(l*e),c=new Uint32Array(i);let f,h,u,m,d,w,p,g,y,x,M,A,I,V,F=0,D=0;function b(t,o){let a=y+M,l=x+A;const i=Math.sqrt(a*a+l*l);a/=i,l/=i;const b=y*a+x*l;a/=b,l/=b;let v=M+I,S=A+V;const k=Math.sqrt(v*v+S*S);v/=k,S/=k;const L=M*v+A*S;v/=L,S/=L,function(t,o,a,l,i,c,f,h,u,m,d,w,p,g){const y=F*e;let x=0;for(const e of[n,r])for(const n of[1,2,3,4])s[y+x++]=t,s[y+x++]=o,s[y+x++]=a,s[y+x++]=l,s[y+x++]=f,s[y+x++]=h,s[y+x++]=u,s[y+x++]=m,s[y+x++]=e,s[y+x++]=n,s[y+x++]=p,s[y+x++]=g,s[y+x++]=i/2,s[y+x++]=c/2,s[y+x++]=d/2,s[y+x++]=w/2,F++}(f,h,u,m,-l,a,d,w,p,g,-S,v,t,o),c[D++]=F-8,c[D++]=F-7,c[D++]=F-6,c[D++]=F-7,c[D++]=F-5,c[D++]=F-6,c[D++]=F-4,c[D++]=F-3,c[D++]=F-2,c[D++]=F-3,c[D++]=F-1,c[D++]=F-2}function v(t,e,n,r,o,a){if(y=M,x=A,M=I,A=V,null==y&&null==x&&(y=M,x=A),null!=d&&null!=w){I=t-d,V=e-w;const n=Math.sqrt(I*I+V*V);I/=n,V/=n}null!=y&&null!=x&&b(o,a),f=d,h=w,u=p,m=g,d=t,w=e,p=n,g=r}function S(t,e){y=M,x=A,M=I,A=V,null==y&&null==x&&(y=M,x=A),null!=y&&null!=x&&b(t,e)}for(const t of a){f=null,h=null,u=null,m=null,d=null,w=null,p=null,g=null,y=null,x=null,M=null,A=null,I=null,V=null;const{totalTime:e,timeSeed:n}=t;for(let r=0;r<t.numberOfVertices;r++)v(o[4*(t.startVertex+r)],o[4*(t.startVertex+r)+1],o[4*(t.startVertex+r)+2],o[4*(t.startVertex+r)+3],e,n);S(e,n)}return{vertexData:s,indexData:c}}(w),y=performance.now();return t("esri-2d-profiler")&&(c.info("I.1","_createFlowFieldFromData (ms)",Math.round(h-i)),c.info("I.2","_getStreamlines (ms)",Math.round(d-h)),c.info("I.3","createAnimatedLinesData (ms)",Math.round(p-d)),c.info("I.4","create{Streamlines|Particles}Mesh (ms)",Math.round(y-p)),c.info("I.5","createFlowMesh (ms)",Math.round(y-i)),c.info("I.6","Mesh size (bytes)",g.vertexData.buffer.byteLength+g.indexData.buffer.byteLength)),await Promise.resolve(),l(a),g}function u(t,e,n,r,o,a,l,i,s){const c=[];let f=n,h=r,u=0,[m,d]=e(f,h);m*=t.velocityScale,d*=t.velocityScale;const w=Math.sqrt(m*m+d*d);let p,g;c.push({x:f,y:h,t:u,speed:w});for(let n=0;n<t.verticesPerLine;n++){let[n,r]=e(f,h);n*=t.velocityScale,r*=t.velocityScale;const m=Math.sqrt(n*n+r*r);if(m<t.minSpeedThreshold)return c;const d=n/m,w=r/m;if(f+=d*t.segmentLength,h+=w*t.segmentLength,u+=t.segmentLength/m,Math.acos(d*p+w*g)>t.maxTurnAngle)return c;if(t.collisions){const t=Math.round(f*s),e=Math.round(h*s);if(t<0||t>l-1||e<0||e>i-1)return c;const n=a[e*l+t];if(-1!==n&&n!==o)return c;a[e*l+t]=o}c.push({x:f,y:h,t:u,speed:m}),p=d,g=w}return c}function m(t,e){const n=e.pixels,{width:o,height:a}=e,l=new Float32Array(o*a*2),i=e.mask||new Uint8Array(o*a*2);if(e.mask||i.fill(255),"vector-uv"===t)for(let t=0;t<o*a;t++)l[2*t]=n[0][t],l[2*t+1]=-n[1][t];else if("vector-magdir"===t)for(let t=0;t<o*a;t++){const e=n[0][t],o=r(n[1][t]),a=Math.cos(o-Math.PI/2),i=Math.sin(o-Math.PI/2);l[2*t]=a*e,l[2*t+1]=i*e}return{data:l,mask:i,width:o,height:a}}async function d(e,n,r,o,a,l){const f=performance.now(),h=i(n.spatialReference);if(!h){const i=await w(e,n,r,o,a,l);return t("esri-2d-profiler")&&c.info("I.7","loadImagery, early exit (ms)",Math.round(performance.now()-f)),t("esri-2d-profiler")&&c.info("I.9","Number of parts",1),i}const[u,m]=h.valid,d=m-u,p=Math.ceil(n.width/d),g=n.width/p,y=Math.round(r/p);let x=n.xmin;const M=[],A=performance.now();for(let t=0;t<p;t++){const t=new s({xmin:x,xmax:x+g,ymin:n.ymin,ymax:n.ymax,spatialReference:n.spatialReference});M.push(w(e,t,y,o,a,l)),x+=g}const I=await Promise.all(M);t("esri-2d-profiler")&&c.info("I.8","All calls to _fetchPart (ms)",Math.round(performance.now()-A)),t("esri-2d-profiler")&&c.info("I.9","Number of parts",I.length);const V={data:new Float32Array(r*o*2),mask:new Uint8Array(r*o),width:r,height:o};let F=0;for(const t of I){for(let e=0;e<t.height;e++)for(let n=0;n<t.width;n++)F+n>=r||(V.data[2*(e*r+F+n)]=t.data[2*(e*t.width+n)],V.data[2*(e*r+F+n)+1]=t.data[2*(e*t.width+n)+1],V.mask[e*r+F+n]=t.mask[e*t.width+n]);F+=t.width}return t("esri-2d-profiler")&&c.info("I.10","loadImagery, general exit (ms)",Math.round(performance.now()-f)),V}async function w(t,e,n,r,l,i){const s={requestProjectedLocalDirections:!0,signal:i};if(a(l)&&(s.timeExtent=l),"imagery"===t.type){await t.load({signal:i});const a=t.rasterInfo.dataType,l=await t.fetchImage(e,n,r,s);return!l||o(l.pixelData)||o(l.pixelData.pixelBlock)?{data:new Float32Array(n*r*2),mask:new Uint8Array(n*r),width:n,height:r}:m(a,l.pixelData.pixelBlock)}await t.load({signal:i});const c=t.rasterInfo.dataType,f=await t.fetchPixels(e,n,r,s);return!f||o(f.pixelBlock)?{data:new Float32Array(n*r*2),mask:new Uint8Array(n*r),width:n,height:r}:m(c,f.pixelBlock)}export{h as c,d as l};
