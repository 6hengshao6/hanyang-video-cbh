/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{i as s,e as i,d as r,a as o,u as n}from"../../../chunks/maybe.js";import{property as a}from"../../../core/accessorSupport/decorators/property.js";import"../../../chunks/ensureType.js";import"../../../chunks/typedArrayUtil.js";import{subclass as h}from"../../../core/accessorSupport/decorators/subclass.js";import{d as l}from"../../../chunks/defaultUnit.js";import{A as c}from"../../../chunks/AnalysisView3D.js";import{M as p}from"../../../chunks/interfaces.js";import{watch as m,sync as d,syncAndInitial as u}from"../../../core/reactiveUtils.js";import{canProjectWithoutEngine as g,canProjectToWGS84ComparableLonLat as _,projectPointToVector as f,projectPointToWGS84ComparableLonLat as y,projectDirection as L,projectVectorToVector as j,tryProjectWithZConversion as v}from"../../../geometry/projection.js";import{g as S,W as k,S as w}from"../../../chunks/spatialReferenceEllipsoidUtils.js";import{d as b,f as C}from"../../../chunks/mathUtils.js";import{c as P,a as M,t as A}from"../../../chunks/quantityUtils.js";import{s as V,d as D,k as R}from"../../../chunks/vec2.js";import{a as G,f as U}from"../../../chunks/vec2f64.js";import{d as T,n as x,D as O,c as z,h as I,E,b as F,m as W,g as B,a as q}from"../../../chunks/vec3.js";import{c as N,f as H}from"../../../chunks/vec4f64.js";import{B as $,w as Q,G as J,H as X,I as Z,J as K}from"../../../chunks/unitUtils.js";import Y from"../../../geometry/SpatialReference.js";import{A as ee}from"../../../chunks/vector.js";import{c as te}from"../../../chunks/Indices.js";import{s as se}from"../../../geometry/Extent.js";import{a as ie}from"../../../chunks/triangle.js";import{s as re,b as oe,f as ne,t as ae,p as he,a as le,c as ce,d as pe}from"../../../chunks/measurementUtils.js";import{m as me,U as de}from"../../../chunks/UnitNormalizer.js";import{g as ue}from"../../../chunks/ElevationProvider.js";import{m as ge,t as _e}from"../../../chunks/mathUtils2.js";import{t as fe}from"../../../chunks/euclideanAreaMeasurementUtils.js";import ye from"../../../core/Evented.js";import Le from"../../../core/Handles.js";import{L as je}from"../../../chunks/Logger.js";import ve from"../../../geometry/Point.js";import{e as Se,b as ke}from"../../../chunks/aaBoundingRect.js";import{l as we,O as be,L as Ce}from"../../../chunks/LineVisualElement.js";import{E as Pe,a as Me,c as Ae,C as Ve}from"../../../chunks/EditGeometryOperations.js";import De from"../../../Color.js";import"../../../intl.js";import{g as Re,a as Ge,b as Ue,c as Te}from"../../../chunks/analysisThemeUtils.js";import{f as xe}from"../../../chunks/quantityFormatUtils.js";import{h as Oe,f as ze}from"../../../chunks/mat4.js";import{c as Ie}from"../../../chunks/mat4f64.js";import{L as Ee,G as Fe,E as We}from"../../../chunks/Segment.js";import{e as Be,c as qe}from"../../../chunks/vec4.js";import{A as Ne}from"../../../chunks/Attribute.js";import{D as He,G as $e,a as Qe}from"../../../chunks/DefaultBufferWriter.js";import{D as Je,M as Xe,R as Ze}from"../../../chunks/Material.js";import{V as Ke}from"../../../chunks/VertexAttribute.js";import{S as Ye}from"../../../chunks/ShaderOutput.js";import{R as et}from"../../../chunks/RenderSlot.js";import{T as tt,P as st}from"../../../chunks/TriangleMaterial.js";import{R as it,S as rt,P as ot}from"../../../chunks/Program2.js";import{o as nt,a as at,b as ht}from"../../../chunks/OrderIndependentTransparency.js";import{T as lt}from"../../../chunks/TransparencyPassType.js";import{m as ct}from"../../../chunks/MultipassTerrainTest.glsl.js";import{C as pt}from"../../../chunks/ColorConversion.glsl.js";import{a as mt}from"../../../chunks/View.glsl.js";import{F as dt}from"../../../chunks/RgbaFloatEncoding.glsl.js";import{F as ut}from"../../../chunks/Float4PassUniform.js";import{g as gt}from"../../../chunks/interfaces2.js";import{S as _t}from"../../../chunks/ShaderBuilder.js";import{B as ft}from"../../../chunks/enums3.js";import{s as yt,m as Lt,d as jt,a as vt}from"../../../chunks/renderState.js";import{p as St}from"../../../chunks/ShaderTechniqueConfiguration.js";import{D as kt}from"../../../chunks/DefaultTechniqueConfiguration.js";import{c as wt}from"../../../chunks/lineStippleUtils.js";import{o as bt}from"../../../chunks/locale.js";import{f as Ct}from"../../../chunks/messages.js";import"../../../chunks/get.js";import"../../../chunks/utils.js";import"../../../chunks/handleUtils.js";import"../../../core/lang.js";import"../../../chunks/metadata.js";import"../../../chunks/ArrayPool.js";import"../../../chunks/tracking.js";import"../../../chunks/watch.js";import"../../../core/scheduling.js";import"../../../chunks/nextTick.js";import"../../../core/promiseUtils.js";import"../../../core/Error.js";import"../../../chunks/object.js";import"../../../config.js";import"../../../chunks/string.js";import"../../../chunks/getDefaultUnitForView.js";import"../../../portal/Portal.js";import"../../../kernel.js";import"../../../core/urlUtils.js";import"../../../request.js";import"../../../core/JSONSupport.js";import"../../../core/Loadable.js";import"../../../core/Promise.js";import"../../../chunks/reader.js";import"../../../portal/PortalQueryParams.js";import"../../../chunks/jsonMap.js";import"../../../geometry/support/webMercatorUtils.js";import"../../../chunks/Ellipsoid.js";import"../../../chunks/writer.js";import"../../../geometry/Geometry.js";import"../../../core/accessorSupport/decorators/cast.js";import"../../../portal/PortalQueryResult.js";import"../../../portal/PortalUser.js";import"../../../portal/PortalFolder.js";import"../../../portal/PortalGroup.js";import"../../../chunks/SimpleObservable.js";import"../../../geometry/Multipoint.js";import"../../../chunks/zmUtils.js";import"../../../chunks/pe.js";import"../../../chunks/assets.js";import"../../../geometry/Polygon.js";import"../../../chunks/extentUtils.js";import"../../../chunks/common.js";import"../../../geometry/Polyline.js";import"../../../chunks/geodesicConstants.js";import"../../../geometry/support/GeographicTransformation.js";import"../../../geometry/support/GeographicTransformationStep.js";import"../../../chunks/zscale.js";import"../../../chunks/ray.js";import"../../../chunks/byteSizeEstimations.js";import"../../../chunks/mat3f64.js";import"../../../chunks/quatf64.js";import"../../../chunks/lineSegment.js";import"../../../geometry/geometryEngine.js";import"../../../chunks/geometryEngineBase.js";import"../../../chunks/hydrated.js";import"../../../geometry/support/geodesicUtils.js";import"../../../geometry.js";import"../../../chunks/typeUtils.js";import"../../../geometry/support/jsonUtils.js";import"../../../chunks/screenUtils.js";import"../../../chunks/earcut.js";import"../../../chunks/plane.js";import"../../../chunks/measurementUtils2.js";import"../../../chunks/VisualElement.js";import"../../../chunks/line.js";import"../../../chunks/DoubleArray.js";import"../../../chunks/ViewingMode.js";import"../../../chunks/geometry2dUtils.js";import"../../../chunks/colorUtils.js";import"../../../chunks/number.js";import"../../support/colorUtils.js";import"../../../chunks/unitFormatUtils.js";import"../../../chunks/Cyclical.js";import"../../../chunks/viewUtils.js";import"../../../chunks/dehydratedFeatures.js";import"../../../chunks/aaBoundingBox.js";import"../../../chunks/quantizationUtils.js";import"../../../layers/support/Field.js";import"../../../chunks/enumeration.js";import"../../../chunks/domains.js";import"../../../layers/support/CodedValueDomain.js";import"../../../layers/support/Domain.js";import"../../../layers/support/InheritedDomain.js";import"../../../layers/support/RangeDomain.js";import"../../../chunks/fieldType.js";import"../../../chunks/elevationInfoUtils.js";import"../../../chunks/unitConversionUtils.js";import"../../../chunks/lengthUtils.js";import"../../../chunks/projector.js";import"../../../chunks/widgetUtils.js";import"../../../chunks/TextOverlayItem.js";import"../../../chunks/basicInterfaces.js";import"../../../chunks/Util2.js";import"../../../chunks/doublePrecisionUtils.js";import"../../../chunks/BufferView.js";import"../../../chunks/sphere.js";import"../../../chunks/Octree.js";import"../../../chunks/frustum.js";import"../../../chunks/InterleavedLayout.js";import"../../../chunks/types.js";import"../../../chunks/glUtil3D.js";import"../../../chunks/mat3.js";import"../../../chunks/VertexElementDescriptor.js";import"../../../chunks/FramebufferObject.js";import"../../../chunks/Texture.js";import"../../../chunks/context-util.js";import"../../../chunks/MarkerSizing.glsl.js";import"../../../chunks/VisualVariables.glsl.js";import"../../../chunks/Float3PassUniform.js";import"../../../chunks/Matrix3PassUniform.js";import"../../../chunks/FloatPassUniform.js";import"../../../chunks/sdfPrimitives.js";import"../../../chunks/floatRGBA.js";import"../../../chunks/Texture2.js";import"../../../chunks/compilerUtils.js";import"../../../chunks/requestImageUtils.js";import"../../../chunks/TextureOnly.glsl.js";import"../../../chunks/ScreenSpacePass.glsl.js";import"../../../chunks/Texture2DPassUniform.js";import"../../../chunks/RibbonLine.glsl.js";import"../../../chunks/ForwardLinearDepth.glsl.js";import"../../../chunks/vec3f32.js";import"../../../chunks/Matrix4PassUniform.js";import"../../../chunks/Slice.glsl.js";import"../../../chunks/ObjectAndLayerIdColor.glsl.js";import"../../../chunks/OutputDepth.glsl.js";import"../../../chunks/LineStipple.glsl.js";import"../../../chunks/PiUtils.glsl.js";import"../../../chunks/AlphaCutoff.js";import"../../../chunks/ReadLinearDepth.glsl.js";import"../../../chunks/mat4f32.js";class Pt{constructor(e,t){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=T(),this.areaCentroidRenderCoords=T(),this.geodesicAreaCentroidRenderCoords=T(),this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=T(),this._planeWorldCoords=N(),this._worldUp=T(),this._worldTangent=T(),this._frame=[T(),T(),T()],this._pathVersion=-1,this._validMeasurement=!1,this._hasCursorPoint=!1,this._mode=null,this._tempU=T(),this._tempV=T(),this._tempVec3=T(),this._tempSphere={center:T(),radius:0},this._sceneView=e,this.unitNormalizer=t}update(e,t,r,o,n,a,h){const l=this.unitNormalizer,c=this._sceneView.renderSpatialReference,p=this.unitNormalizer.spatialReference,m=s(t);if(this._pathVersion===e.version&&this._validMeasurement===o&&!h&&this._hasCursorPoint===m&&this._mode===a)return!e.isValidPolygon&&(this._updateCursorSegmentLength(e,t),!0);this._pathVersion=e.version,this._validMeasurement=o,this._hasCursorPoint=m;const d=e.numVertices;this._resize(d);const u=S(r.spatialReference),L=g(r.spatialReference,u)&&_(r.spatialReference),{positionsGeographic:j,positionsWorldCoords:v,positionsRenderCoords:k,positionsSpherical:w}=this;e.forEachVertexPosition(((e,t)=>{!function(e,t){t.hasZ||(t.z=i(ue(e,t,"ground"),0))}(r.elevationProvider,e),f(e,v[t],p),f(e,k[t],c),L&&(y(e,j[t]),f(e,w[t],u),x(w[t],w[t]))}));const b=this._updatePathLengths(o);if(this.pathLength=this._length>1?P(l.normalizeDistance(b),"meters"):null,L){const e=this._updateGeodesicPathLengths(o,p);this.geodesicPathLength=this._length>1?P(e,"meters"):null}else this.geodesicPathLength=null;return this._updateCursorSegmentLength(e,t),this._updateMode(e,a),o?(this._updateArea(r,l,c,p,n),L&&this._updateGeodesicArea(r),!0):(this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),!0)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,cursorSegmentLength:this.cursorSegmentLength,geodesicCursorSegmentLength:this.geodesicCursorSegmentLength,unitNormalizer:this.unitNormalizer,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(T()),this.positionsRenderCoords.push(T()),this.positionsProjectedWorldCoords.push(G()),this.positionsFittedRenderCoords.push(T()),this.positionsGeographic.push(T()),this.positionsSpherical.push(T()),this.positionsStereographic.push(G()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorldCoords,s=this.pathSegmentLengths;let i=0;for(let r=0;r<this._length;++r){const o=s[r]=O(t[r],t[(r+1)%this._length]);(r<this._length-1||e)&&(i+=o)}return i}_updateGeodesicPathLengths(e,t){const s=this.positionsGeographic,i=this.geodesicPathSegmentLengths;let r=0;for(let o=0;o<this._length;++o){const n=i[o]=re(s[o],s[(o+1)%this._length],t??void 0);(o<this._length-1||e)&&(r+=n)}return r}_updateArea(e,t,s,i,r){const o=e.renderCoordsHelper,n=this.positionsWorldCoords,a=this.positionsRenderCoords,h=this.positionsProjectedWorldCoords,l=this.positionsFittedRenderCoords,c=this._planeWorldCoords,p=this._centroidRenderCoords;me(a,p),o.worldUpAtPosition(p,this._worldUp),o.worldBasisAtPosition(p,ee.X,this._worldTangent),L(p,this._worldUp,s,this._worldUp,i),L(p,this._worldTangent,s,this._worldTangent,i),n.length>2&&oe(n,c),this.fittingMode=this._selectFittingMode(c,n,this._worldUp,r);let m=0;if("horizontal"===this.fittingMode){let e=-1/0;a.forEach(((t,s)=>{const i=o.getAltitude(a[s]);i>e&&(e=i,m=s)}))}const d=n[m];let u=c,g=this._worldTangent;"horizontal"===this.fittingMode?u=this._worldUp:"vertical"===this.fittingMode&&(u=this._tempVec3,g=this._worldUp,ge(c,this._worldUp,u)),z(this._frame[2],u),ge(g,u,this._frame[0]),I(this._frame[1],this._frame[0],this._frame[2]),E(this._frame[1],this._frame[1]);const _=this._tempVec3,f=this._tempU,y=this._tempV;for(let e=0;e<this._length;++e){const t=h[e],r=l[e];F(_,n[e],d),V(t,W(this._frame[0],_),W(this._frame[1],_)),B(f,this._frame[0],t[0]),B(y,this._frame[1],t[1]),q(_,f,y),q(_,_,d),j(_,i,r,s)}this.perimeterLength=this._length>0?P(t.normalizeDistance(this._updatePerimeterLengths()),"meters"):null,me(l,this.areaCentroidRenderCoords),j(this.areaCentroidRenderCoords,s,this.areaCentroidWorldCoords,i),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?M(t.normalizeArea(this._computeArea()),"square-meters"):null}_updateGeodesicArea(e){const{renderCoordsHelper:t,spatialReference:s}=e,{positionsSpherical:i,positionsStereographic:r}=this,o=this._tempVec3,n=ne(i,o);if(!n)return void(this.geodesicArea=null);const a=this._tempU,h=this._tempV;_e(o,a,h);for(let e=0;e<this._length;++e){const t=W(i[e],a),s=W(i[e],h),n=W(i[e],o);V(r[e],t/n,s/n)}B(o,o,$(s).radius),t.toRenderCoords(o,S(s),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=n&&0===this.geodesicIntersectingSegments.size?M(this._computeGeodesicArea(),"square-meters"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths;let s=0;for(let i=0;i<this._length;++i)s+=t[i]=D(e[i],e[(i+1)%this._length]);return s}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const r=e[s],o=e[(s+1)%this._length],n=e[i],a=e[(i+1)%this._length];se(r,o,n,a)&&(t.add(s),t.add(i))}}_computeArea(){const e=this.positionsProjectedWorldCoords,t=this.triangleIndices=te(fe(e));let s=0;for(let i=0;i<t.length;i+=3)s+=ie(e[t[i]],e[t[i+1]],e[t[i+2]]);return s}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const r=e[s],o=e[(s+1)%this._length],n=e[i],a=e[(i+1)%this._length];se(r,o,n,a)&&(t.add(s),t.add(i))}}_computeGeodesicArea(){const e=this.positionsGeographic,t=this.positionsStereographic,s=this.geodesicTriangleIndices=te(fe(t));let i=0;for(let t=0;t<s.length;t+=3)i+=ae(e[s[t]],e[s[t+1]],e[s[t+2]],Y.WGS84);return i}_selectFittingMode(e,t,s,i){const r=t.map((t=>Math.abs(he(e,t)))).reduce(((e,t)=>Math.max(e,t)),0);le(t,this._tempSphere);const o=r/(2*this._tempSphere.radius),n=o<i.maxRelativeErrorCoplanar,a=o<i.maxRelativeErrorAlmostCoplanar;let h="horizontal";return n?h="oblique":a&&(h=Math.abs(W(s,e))>Math.cos(b(i.verticalAngleThreshold))?"horizontal":"vertical"),h}_updateCursorSegmentLength(e,t){const i=e.lastPoint;!e.isValidPolygon&&s(i)&&s(t)?(this.geodesicCursorSegmentLength=P(ce(i,t),"meters"),this.cursorSegmentLength=P(this.unitNormalizer.normalizeDistance(pe(i,t,this.unitNormalizer.spatialReference)),"meters")):(this.geodesicCursorSegmentLength=null,this.cursorSegmentLength=null)}_updateMode(e,t){if(t===p.Auto){this.actualMeasurementMode="euclidean";let t=0;null!=this.geodesicPathLength&&(t+=this.geodesicPathLength.value),!e.isValidPolygon&&s(this.geodesicCursorSegmentLength)&&(t+=this.geodesicCursorSegmentLength.value),t>Mt&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=t===p.Euclidean?"euclidean":"geodesic";null==this.geodesicPathLength&&(this.actualMeasurementMode="euclidean"),this._mode=t}}const Mt=1e5;let At=class extends t{constructor(e){super(e)}initialize(){const e=this.view.spatialReference,t=S(e),s=t===w?k:t,i=!e||g(e,s)?s:e,r=new de(i);this._measurementDataManager=new Pt(this.view,r),this.addHandles([this.analysisViewData.path.on("change",(()=>this._update())),m((()=>this.analysisViewData.cursorPoint),(()=>this._update()),d),m((()=>this.analysisViewData.mode),(()=>this._update()),d)]),this._update()}_update(e=!1){const{analysisViewData:t,view:s}=this;this._measurementDataManager.update(t.path,t.cursorPoint,s,t.validMeasurement,{maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80},t.mode,e)&&(t.measurementData=this._measurementDataManager.getData())}};e([a({constructOnly:!0})],At.prototype,"view",void 0),e([a({constructOnly:!0})],At.prototype,"analysis",void 0),e([a({constructOnly:!0})],At.prototype,"analysisViewData",void 0),At=e([h("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementController")],At);const Vt="esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurement3DPathHelper",Dt=je.getLogger(Vt);let Rt=class extends ye.EventedAccessor{constructor(e={}){super(e),this._handles=new Le,this._version=0,this._internalGeometryChange=!1,this._extent=Se()}destroy(){this._handles=r(this._handles)}set areaMeasurement(e){this._set("areaMeasurement",e),s(e)&&s(this.view)&&this._initialize(e,this.view)}set view(e){this._set("view",e),s(e)&&s(this.areaMeasurement)&&this._initialize(this.areaMeasurement,e)}get constructed(){return s(this.areaMeasurement)&&s(this.view)}get version(){return this._version}get isValidPolygon(){return this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}get extent(){if(this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].vertices.length>0){const e=Se(this._extent);return this.forEachVertex((t=>{ke(e,t.pos)})),e}return null}get spatialReference(){return this.constructed?this._editGeometry.coordinateHelper.spatialReference:null}_initialize(e,t){this._handles.removeAll(),this._handles.add(m((()=>e.geometry),(()=>{this._updateEditGeometryFromModelGeometry(e,t)}),u)),this._makeDirty(!0)}_makeDirty(e=!1){this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),this.notifyChange("extent"),e&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(e,t){if(this._version++,this._internalGeometryChange)return;this._handles.remove("EditGeometry");let i=e.geometry;if(s(i)){const s=v(i,t.spatialReference);o(s)&&we(e,i.spatialReference,Dt),i=s}s(i)?this._editGeometryOperations=Pe.fromGeometry(i,t.state.viewingMode):this._editGeometryOperations=new Pe(new Me("polygon",Ae(!0,!1,t.spatialReference))),this._makeDirty(!0),this.emit("change"),this._handles.add(this._editGeometry.on("change",(t=>{this._makeDirty(null!=t.addedVertices||null!=t.removedVertices),this._internalGeometryChange=!0,e.geometry=this.numVertices>0?this._editGeometry.geometry:null,this._internalGeometryChange=!1})),"EditGeometry")}get _editGeometry(){return this._editGeometryOperations.data}get vertices(){const e=[];return this.forEachVertex((t=>{e.push(t)})),e}get numVertices(){return this.constructed&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get lastPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getLastVertex();if(s(e))return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}getVertex(e){if(!this.constructed||0===this._editGeometry.components.length||0===this._editGeometry.components[0].vertices.length)return null;const t=this._editGeometry.components[0].vertices[0];let s=t;do{if(s.index===e)return s;s=s.rightEdge.rightVertex}while(s!==t&&null!=s);return null}getVertexPositionAsPoint(e){return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}getVertexPositionAsPointFromIndex(e){return this._editGeometry.coordinateHelper.vectorToPoint(this.getVertex(e).pos)}forEachVertex(e){this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(e)}forEachVertexPosition(e){const t=this._editGeometry.coordinateHelper;this.forEachVertex(((s,i)=>{t.vectorToPoint(s.pos,Gt),e(Gt,i)}))}clear(){s(this.areaMeasurement)&&(this.areaMeasurement.geometry=null)}add(e){if(!this.constructed)return null;if(0===this._editGeometry.components.length){const e=n(this.view);this._editGeometry.components.push(new Ve(e.spatialReference,e.state.viewingMode))}const t=this._editGeometryOperations.appendVertex(this._editGeometry.coordinateHelper.pointToVector(e));return this.emit("change"),t}close(){if(!this.constructed||0===this._editGeometry.components.length)return null;const e=this._editGeometryOperations.closeComponent(this._editGeometry.components[0]);return this.emit("change"),e}ensureContains(e,t=""){let s=!1;if(this._editGeometry.components.forEach((t=>{t.iterateVertices((t=>{t===e&&(s=!0)}))})),!s)throw new Error(`vertex doesnt exist ${t}`);return s}setVertexPosition(e,t){if(!this.constructed)return null;const s=this._editGeometryOperations.setVertexPosition(e,this._editGeometry.coordinateHelper.pointToVector(t));return this.emit("change"),s}equals(e){if(this.numVertices!==e.numVertices)return!1;let t=!0;return this.forEachVertexPosition(((s,i)=>{const r=e.getVertexPositionAsPointFromIndex(i);s.equals(r)||(t=!1)})),!!t}};e([a({value:null})],Rt.prototype,"areaMeasurement",null),e([a({value:null})],Rt.prototype,"view",null),e([a()],Rt.prototype,"isValidPolygon",null),e([a()],Rt.prototype,"extent",null),e([a()],Rt.prototype,"spatialReference",null),e([a()],Rt.prototype,"numVertices",null),Rt=e([h(Vt)],Rt);const Gt=new ve,Ut=Object.freeze(Object.defineProperty({__proto__:null,build:function(e){const t=new _t,{vertex:s,fragment:i}=t;return mt(s,e),t.attributes.add(Ke.POSITION,"vec3"),t.attributes.add(Ke.UV0,"vec2"),t.varyings.add("vUV","vec2"),e.hasMultipassTerrain&&t.varyings.add("depth","float"),s.code.add(gt`
    void main(void) {
      vUV = uv0;
      ${e.hasMultipassTerrain?"depth = (view * vec4(position, 1.0)).z;":""}
      gl_Position = proj * view * vec4(position, 1.0);
    }
  `),t.include(ct,e),i.uniforms.add(new dt("size",(e=>e.size))),i.uniforms.add(new ut("color1",(e=>e.color1))),i.uniforms.add(new ut("color2",(e=>e.color2))),i.include(pt),i.code.add(gt`
    void main() {
      ${e.hasMultipassTerrain?"terrainDepthTest(gl_FragCoord, depth);":""}
      vec2 uvScaled = vUV / (2.0 * size);

      vec2 uv = fract(uvScaled - 0.25);
      vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
      float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
      float t = mix(abs(ab.x + ab.y), 0.5, fade);

      fragColor = mix(color2, color1, t);
      ${e.transparencyPassType===lt.Color?"fragColor = premultiplyAlpha(fragColor);":""}
    }
  `),t}},Symbol.toStringTag,{value:"Module"}));class Tt extends rt{initializeProgram(e){return new ot(e.rctx,Tt.shader.get().build(this.configuration),Je)}_setPipelineState(e){const t=this.configuration,s=e===lt.NONE,i=e===lt.FrontFace;return Lt({blending:t.transparent?s?Ot:nt(e):null,depthTest:{func:at(e)},depthWrite:s?t.writeDepth?jt:null:ht(e),colorWrite:vt,polygonOffset:s||i?t.polygonOffset?xt:null:{factor:-1,units:-25}})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}Tt.shader=new it(Ut,(()=>Promise.resolve().then((()=>Ut))));const xt={factor:0,units:-25},Ot=yt(ft.SRC_ALPHA,ft.ONE,ft.ONE_MINUS_SRC_ALPHA,ft.ONE_MINUS_SRC_ALPHA);class zt extends kt{constructor(){super(...arguments),this.transparencyPassType=lt.NONE,this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.hasMultipassTerrain=!1,this.cullAboveGround=!1}}e([St({count:lt.COUNT})],zt.prototype,"transparencyPassType",void 0),e([St()],zt.prototype,"transparent",void 0),e([St()],zt.prototype,"writeDepth",void 0),e([St()],zt.prototype,"polygonOffset",void 0),e([St()],zt.prototype,"hasMultipassTerrain",void 0),e([St()],zt.prototype,"cullAboveGround",void 0);class It extends tt{constructor(e){super(e,new Ft),this._configuration=new zt}dispose(){}getConfiguration(e,t){return this._configuration.transparent=this.parameters.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.polygonOffset=this.parameters.polygonOffset,this._configuration.transparencyPassType=t.transparencyPassType,this._configuration.hasMultipassTerrain=t.multipassTerrain.enabled,this._configuration.cullAboveGround=t.multipassTerrain.cullAboveGround,this._configuration}requiresSlot(e,t){return!(t!==Ye.Color&&t!==Ye.Alpha||e!==(this.parameters.transparent?this.parameters.writeDepth?et.TRANSPARENT_MATERIAL:et.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL:et.OPAQUE_MATERIAL)&&e!==et.DRAPED_MATERIAL)}createGLMaterial(e){return new Et(e)}createBufferWriter(){return new He(st)}}class Et extends $e{beginSlot(e){return this.ensureTechnique(Tt,e)}}class Ft extends Xe{constructor(){super(...arguments),this.size=U(1,1),this.color1=H(.75,.75,.75,1),this.color2=H(.5,.5,.5,1),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1}}class Wt extends be{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=Ze.OccludeAndTransparent,this._geometry=null,this._size=U(1,1),this._color1=H(1,.5,0,.5),this._color2=H(1,1,1,.5),this.applyProps(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this._geometryChanged()}get size(){return this._size}set size(e){R(this._size,e),this._updateMaterial()}get color1(){return this._color1}set color1(e){Be(e,this._color1)||(qe(this._color1,e),this._updateMaterial())}get color2(){return this._color2}set color2(e){Be(e,this._color2)||(qe(this._color2,e),this._updateMaterial())}_updateMaterial(){s(this._checkerBoardMaterial)&&this._checkerBoardMaterial.setParameters({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new It({size:this._size,color1:this._color1,color2:this._color2,transparent:!0,writeDepth:!1,polygonOffset:!0,renderOccluded:Ze.OccludeAndTransparent})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachExternalMaterial(e){s(this._checkerBoardMaterial)&&e(this._checkerBoardMaterial)}createGeometries(e){if(o(this._geometry)||o(this._checkerBoardMaterial))return;const t=Bt;Oe(t,this.transform);const s=this._geometry,i=[],r=T();s.position.forEach((e=>{F(r,e,t),i.push(r[0],r[1],r[2])}));const n=[];s.uv.forEach((e=>{n.push(e[0],e[1])}));const a=new Qe(this._checkerBoardMaterial,[[Ke.POSITION,new Ne(i,3,!0)],[Ke.UV0,new Ne(n,2,!0)]],[[Ke.POSITION,s.triangleIndices],[Ke.UV0,s.triangleIndices]]);e.addGeometry(a)}_geometryChanged(){this.recreateGeometry()}}const Bt=T();let qt=class extends t{get visible(){return this.analysisViewData.visible}get testData(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}constructor(e){super(e),this._handles=new Le,this._params={pathLineColor:De.toUnitRGBA(Re()),pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:De.toUnitRGBA(Re()),perimeterLineWidth:2,projectionLineColor:De.toUnitRGBA(Re()),projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:De.toUnitRGBA(Re(.5)),areaColor2:De.toUnitRGBA(Ge(.5)),labelDistance:25},this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._pathLengthLabel=null,this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._cursorSegment=null,this._origin=T(),this._originTransform=Ie(),this._cursorPositionRenderSpace=T(),this.messages=null,this.viewData=Ht,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:e,_params:t,view:s}=this;this._path=new Ce({view:s,attached:!0,width:t.pathLineWidth,color:t.pathLineColor,polygonOffset:!0,renderOccluded:Ze.OccludeAndTransparent}),this._intersectedPath=new Ce({view:s,attached:!0,width:t.pathLineWidth,color:t.intersectingLineColor,polygonOffset:!0,renderOccluded:Ze.OccludeAndTransparent}),this._perimeter=new Ce({view:s,attached:!0,width:t.perimeterLineWidth,color:t.perimeterLineColor,polygonOffset:!0,renderOccluded:Ze.OccludeAndTransparent}),this._intersectedPerimeter=new Ce({view:s,attached:!0,width:t.perimeterLineWidth,color:t.intersectingLineColor,polygonOffset:!0,renderOccluded:Ze.OccludeAndTransparent}),this._projectionLines=new Ce({view:s,attached:!0,width:t.projectionLineWidth,color:t.projectionLineColor,stipplePattern:wt(t.projectionLineStippleSize),polygonOffset:!0,renderOccluded:Ze.OccludeAndTransparent}),this._measurementArea=new Wt({view:s,attached:!0,color1:t.areaColor1,color2:t.areaColor2});const i={attached:!0,backgroundColor:Ue(.6),textColor:Te(),view:s};this._areaLabel=new Ee({...i,fontSize:Nt.Large}),this._pathLengthLabel=new Ee({...i,fontSize:Nt.Small}),this._cursorSegmentLengthLabel=new Ee({...i,fontSize:Nt.Small}),this._perimeterLengthLabel=new Ee({...i,fontSize:Nt.Small}),this._handles.add([m((()=>[e.mode,this.visible,e.unit,e.measurementData,e.cursorPoint]),(()=>this._update()),u),m((()=>s.state?.camera),(()=>this._updateLabels()),u),bt((()=>this._updateMessageBundle()))]),this._updateMessageBundle()}destroy(){this._measurementArea=r(this._measurementArea),this._path=r(this._path),this._intersectedPath=r(this._intersectedPath),this._perimeter=r(this._perimeter),this._intersectedPerimeter=r(this._intersectedPerimeter),this._areaLabel=r(this._areaLabel),this._pathLengthLabel=r(this._pathLengthLabel),this._cursorSegmentLengthLabel=r(this._cursorSegmentLengthLabel),this._perimeterLengthLabel=r(this._perimeterLengthLabel),this._projectionLines=r(this._projectionLines),this._handles=r(this._handles),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:e},analysisViewData:t}=this;o(e)||(this._updateViewData(e,t.path,t.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(e,t,s){const i=t.isValidPolygon,r="geodesic"===e.actualMeasurementMode,o=r?e.geodesicArea:e.area;let n=1;if(o){const t=this._toPreferredAreaUnit(o,this.analysisViewData.unit);n=C(Math.sqrt(t.value)/Math.sqrt(300)),n*=Math.sqrt(Q(1,t.unit,"square-meters")),n/=e.unitNormalizer.normalizeDistance(1)}const a={validMeasurement:i,path:t,pathVersion:t.version,cursorPoint:s,measurementData:e,mode:e.actualMeasurementMode,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:r?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:r?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:r?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:i?0:t.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:n};this._set("viewData",a)}_updateOrigin(){const e=this.viewData;me(e.positionsRenderCoords,this._origin),ze(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(e){const t=this.viewData,s=t.path,i=this.view.renderCoordsHelper.spatialReference,r=t.mode,o=[],n=[],a=[],h=t.validMeasurement?s.numVertices:s.numVertices-1;for(let l=0;l<h;++l){const h=t[e][l],c=t[e][(l+1)%s.numVertices];let p=null;switch(r){case"euclidean":p=new We(h,c);break;case"geodesic":p=new Fe(h,c,i)}t.intersectingSegments.has(l)?a.push(p):n.push(p),o.push(p)}return{all:o,nonIntersecting:n,intersecting:a}}_updatePathSegments(){const{view:{renderCoordsHelper:e},viewData:t,visible:i}=this,r=this._createSegments("positionsRenderCoords"),{cursorPoint:o,mode:n,path:a}=t,h=!a.isValidPolygon,l=e.spatialReference;if(this._cursorSegment=null,a.numVertices>0&&h&&s(o)&&e.toRenderCoords(o,this._cursorPositionRenderSpace)){const e=t.positionsRenderCoords[a.numVertices-1],s=this._cursorPositionRenderSpace;let i=null;switch(n){case"euclidean":i=new We(e,s);break;case"geodesic":i=new Fe(e,s,l)}r.nonIntersecting.push(i),this._cursorSegment=i}this._path.setGeometryFromSegments(r.nonIntersecting,this._origin),this._path.visible=i,this._intersectedPath.setGeometryFromSegments(r.intersecting,this._origin),this._intersectedPath.visible=i,this._pathSegments=r.all}_updatePerimeterSegments(){const e=this.visible&&"euclidean"===this.viewData.mode,t=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all}_updateArea(){const e=this.viewData;switch(e.mode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const e=this.viewData,t=this.visible,s=e.path,i=e.mode;if(s.numVertices>0&&e.validMeasurement&&"euclidean"===i){const i=[];for(let t=0;t<s.numVertices;++t){const s=T();F(s,e.positionsRenderCoords[t],this._origin);const r=T();F(r,e.positionsFittedRenderCoords[t],this._origin),i.push([s,r])}this._projectionLines.geometry=i,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:e}=this,{measurementData:t,mode:i,path:r}=e;if(!r)return;const o=!r.isValidPolygon,a=this.visible,h=this._formatAreaLabel(this.messages,"geodesic"===i?t.geodesicArea:t.area,this.analysisViewData.unit);s(h)?(this._areaLabel.geometry={type:"point",point:e.areaCentroid},this._areaLabel.text=h,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&a):this._areaLabel.visible=!1,this._set("areaLabel",n(h));const l=this._formatLengthLabel(this.messages,"geodesic"===i?t.geodesicPathLength:t.pathLength,this.analysisViewData.unit);if(s(l)&&e.pathLengthLabelSegmentIndex>=0&&e.pathLengthLabelSegmentIndex<this._pathSegments.length){const t=this._pathSegments[e.pathLengthLabelSegmentIndex],i=s(this._cursorSegment)?this._cursorSegment:$t;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:t,right:i},this._pathLengthLabel.text=l,this._pathLengthLabel.visible=o&&r.numVertices>0&&a}else this._pathLengthLabel.visible=!1;const c="geodesic"===i?e.measurementData.geodesicCursorSegmentLength:e.measurementData.cursorSegmentLength;if(s(c)){const e=this._formatLengthLabel(this.messages,c,this.analysisViewData.unit);this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=s(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=n(e),this._cursorSegmentLengthLabel.visible=o&&0!==c.value&&a}else this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);const p="geodesic"===e.mode,m=p?t.geodesicPathLength:t.perimeterLength,d=this._formatLengthLabel(this.messages,m,this.analysisViewData.unit);if(this._set("perimeterLengthLabel",n(d)),e.validMeasurement&&0===e.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=n(d),this._perimeterLengthLabel.visible=!0;let t=!0;for(let s=0;s<e.path.numVertices;++s){const i=(e.perimeterLengthLabelSegmentIndex+s)%e.path.numVertices,r=p?this._pathSegments[i]:this._perimeterSegments[i];if(t=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:r,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;t=!1}this._perimeterLengthLabel.visible=t&&a}else this._perimeterLengthLabel.visible=!1}_toPreferredAreaUnit(e,t){return A(e,this._preferredAreaUnit(e,t))}_preferredAreaUnit(e,t){switch(t){case"metric":return X(e.value,e.unit);case"imperial":return J(e.value,e.unit);default:return t}}_preferredLengthUnit(e,t){const s=this._deriveLengthUnitFromAreaUnit(t);switch(s){case"metric":return K(e.value,e.unit);case"imperial":return Z(e.value,e.unit);default:return s}}_deriveLengthUnitFromAreaUnit(e){switch(e){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")}_formatAreaLabel(e,t,s){return e&&t&&xe(e,t,this._preferredAreaUnit(t,s))}_formatLengthLabel(e,t,s){return e&&t&&xe(e,t,this._preferredLengthUnit(t,s))}_updateMessageBundle(){this.loadingMessages=!0,Ct("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._update()})).finally((()=>{this.loadingMessages=!1}))}};var Nt;e([a()],qt.prototype,"view",void 0),e([a()],qt.prototype,"messages",void 0),e([a()],qt.prototype,"analysis",void 0),e([a()],qt.prototype,"viewData",void 0),e([a()],qt.prototype,"analysisViewData",void 0),e([a({readOnly:!0})],qt.prototype,"areaLabel",void 0),e([a({readOnly:!0})],qt.prototype,"perimeterLengthLabel",void 0),e([a()],qt.prototype,"loadingMessages",void 0),e([a()],qt.prototype,"visible",null),qt=e([h("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],qt),function(e){e[e.Small=12]="Small",e[e.Large=16]="Large"}(Nt||(Nt={}));const Ht={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null},$t=new We(T(),T());let Qt=class extends(c(t)){constructor(e){super(e),this.type="area-measurement-view-3d",this.analysis=null,this.measurementData=null,this.lastDraggedVertex=null,this.cursorPoint=null,this.mode=p.Auto}initialize(){const{analysis:e,view:t}=this;this.path=new Rt({view:t,areaMeasurement:e}),this.analysisVisualization=new qt({view:t,analysis:e,analysisViewData:this}),this.analysisController=new At({view:t,analysis:e,analysisViewData:this})}destroy(){this.analysisController=r(this.analysisController),this.analysisVisualization=r(this.analysisVisualization),this.path.destroy()}get updating(){return!!this.analysisVisualization?.loadingMessages}get result(){const{measurementData:e}=this;return o(e)?{area:null,mode:null,perimeter:null}:"euclidean"===e.actualMeasurementMode?{area:e.area,perimeter:e.perimeterLength,mode:"euclidean"}:{area:e.geodesicArea,perimeter:e.pathLength,mode:"geodesic"}}get viewData(){return this.analysisVisualization.viewData}get validMeasurement(){return this.path.isValidPolygon}get unit(){return i(this.analysis.unit,this._defaultUnit)}get testData(){return{visualization:this.analysisVisualization,controller:this.analysisController}}};e([a({readOnly:!0})],Qt.prototype,"type",void 0),e([a({constructOnly:!0,nonNullable:!0})],Qt.prototype,"analysis",void 0),e([a()],Qt.prototype,"updating",null),e([a()],Qt.prototype,"analysisVisualization",void 0),e([a()],Qt.prototype,"analysisController",void 0),e([a()],Qt.prototype,"result",null),e([a()],Qt.prototype,"measurementData",void 0),e([a()],Qt.prototype,"viewData",null),e([a()],Qt.prototype,"validMeasurement",null),e([a()],Qt.prototype,"path",void 0),e([a()],Qt.prototype,"lastDraggedVertex",void 0),e([a()],Qt.prototype,"cursorPoint",void 0),e([a()],Qt.prototype,"mode",void 0),e([a()],Qt.prototype,"unit",null),e([a(l)],Qt.prototype,"_defaultUnit",void 0),Qt=e([h("esri.views.3d.analysis.AreaMeasurementAnalysisView3D")],Qt);const Jt=Qt;export{Jt as default};
