// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../geometry ../../Graphic ../../rasterRenderers ../../request ../../core/Error ../../core/jsonMap ../../core/lang ../../core/Logger ../../core/maybe ../../core/reactiveUtils ../../core/urlUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/reader ../../core/accessorSupport/decorators/subclass ../../core/accessorSupport/decorators/writer ../support/commonProperties ../support/DimensionalDefinition ../support/ExportImageServiceParameters ../support/Field ../support/FieldsIndex ../support/imageBitmapUtils ../support/imageryRendererUtils ../support/MosaicRule ../support/MultidimensionalSubset ../support/PixelBlock ../support/rasterEnums ../support/RasterFunction ../support/RasterInfo ../support/RasterJobHandler ../support/rasterDatasets/multidimensionalUtils ../support/rasterFormats/RasterCodec ../support/rasterFunctions/vectorFieldUtils ../../renderers/support/rasterRendererHelper ../../renderers/support/RasterSymbolizer ../../rest/imageService ../../core/has ../support/source/DataLayerSource ../../rest/query/executeQueryJSON ../../config ../../kernel ../../core/unitUtils ../../geometry/support/spatialReferenceUtils ../graphics/featureConversionUtils ../../geometry/Extent ../../geometry/Geometry ../../geometry/Multipoint ../../geometry/Point ../../geometry/Polygon ../../geometry/Polyline ../../geometry/support/normalizeUtils ../../core/pbf ../../rest/support/FeatureSet ../../rest/support/Query ../../rest/query/support/AttachmentInfo ../../rest/support/AttachmentQuery ../../rest/query/executeForCount ../../rest/query/executeForIds ../../rest/support/RelationshipQuery ../../rest/support/TopFeaturesQuery ../../rest/imageService/fetchRasterInfo ../../rest/imageService/getCatalogItemRasterInfo ../../rest/support/ImageAngleParameters ../../rest/support/ImageAreaParameters ../../rest/support/ImageDistanceParameters ../../rest/support/ImageHeightParameters ../../rest/support/ImageHistogramParameters ../../rest/support/ImageIdentifyParameters ../../rest/support/ImagePixelLocationParameters ../../rest/support/ImagePointParameters ../../rest/support/ImageSampleParameters ../../views/2d/engine/flow/dataUtils ../../geometry/SpatialReference".split(" "),
function(X,O,h,Ra,ia,P,C,y,ja,Y,Z,t,ka,la,p,z,A,ma,E,aa,na,oa,F,pa,ba,qa,G,ra,Q,I,H,sa,ta,J,R,ua,L,va,D,Sa,Ta,wa,Ua,Va,Wa,Xa,Ya,S,Za,$a,ab,xa,bb,cb,db,ya,T,eb,fb,za,Aa,gb,hb,ca,Ba,Ca,Da,Ea,Fa,da,ea,Ga,Ha,Ia,Ja,U){function Ka(g){return g?(g=JSON.stringify(g).match(/"rasterFunction":"(.*?")/gi)?.map(w=>w.replace('"rasterFunction":"',"").replace('"',"")))?g.join("/"):null:null}const V=ja.strict()({U1:"u1",U2:"u2",U4:"u4",U8:"u8",S8:"s8",U16:"u16",S16:"s16",U32:"u32",S32:"s32",F32:"f32",F64:"f64",C64:"c64",
C128:"c128",UNKNOWN:"unknown"}),La=new Set("png png8 png24 png32 jpg bmp gif jpgpng lerc tiff".split(" ")),Ma=p.ensureRange(z.ensureNumber,{min:0,max:255});X.ArcGISImageService=g=>{function w(e){return e?.path??""}g=function(e){function K(){var a=Na.apply(this,arguments);a._functionRasterInfos={};a._rasterJobHandler={instance:null,refCount:0,connectionPromise:null};a._cachedRendererJson=null;a._serviceSupportsMosaicRule=null;a._rasterAttributeTableFieldPrefix="Raster.";a.adjustAspectRatio=null;a.bandIds=
void 0;a.capabilities=null;a.compressionQuality=void 0;a.compressionTolerance=.01;a.copyright=null;a.defaultMosaicRule=null;a.definitionExpression=null;a.exportImageServiceParameters=null;a.rasterInfo=null;a.fields=null;a.fullExtent=null;a.hasMultidimensions=!1;a.imageMaxHeight=4100;a.imageMaxWidth=4100;a.interpolation=void 0;a.minScale=0;a.maxScale=0;a.multidimensionalInfo=null;a.multidimensionalSubset=null;a.noData=null;a.noDataInterpretation=void 0;a.objectIdField=null;a.geometryType="polygon";
a.typeIdField=null;a.types=[];a.pixelFilter=null;a.raster=void 0;a.sourceType=null;a.viewId=void 0;a.symbolizer=null;a.rasterFunctionInfos=null;a.serviceDataType=null;a.spatialReference=null;a.pixelType=null;a.serviceRasterInfo=null;a.sourceJSON=null;a.url=null;a.version=void 0;return a}O._inherits(K,e);var Na=O._createSuper(K);e=K.prototype;e.initialize=function(){this._set("exportImageServiceParameters",new oa.ExportImageServiceParameters({layer:this}))};e.readServiceSupportsMosaicRule=function(a,
b){return this._isMosaicRuleSupported(b)};e.readBandIds=function(a,b){if(Array.isArray(a)&&0<a.length&&a.every(c=>"number"===typeof c))return a};e.readCapabilities=function(a,b){return this._readCapabilities(b)};e.writeCompressionQuality=function(a,b,c){null!=a&&"lerc"!==this.format&&(b[c]=a)};e.writeCompressionTolerance=function(a,b,c){"lerc"===this.format&&null!=a&&(b[c]=a)};e.readDefaultMosaicRule=function(a,b){return this._serviceSupportsMosaicRule?G.fromJSON(b):null};e.readFormat=function(a,
b){return"esriImageServiceDataTypeVector-UV"===b.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===b.serviceDataType?"lerc":null!=this.pixelFilter?"lerc":"jpgpng"};e.readMinScale=function(a,b){return null!=b.minLOD&&null!=b.maxLOD?a:0};e.readMaxScale=function(a,b){return null!=b.minLOD&&null!=b.maxLOD?a:0};e.readMosaicRule=function(a,b){return(a=a||b.mosaicRule)?G.fromJSON(a):this._isMosaicRuleSupported(b)?G.fromJSON(b):null};e.writeMosaicRule=function(a,b,c){a=this.mosaicRule;const d=this.definitionExpression;
a?d&&d!==a.where&&(a=a.clone(),a.where=d):d&&(a=new G({where:d}));this._isValidCustomizedMosaicRule(a)&&(b[c]=a.toJSON())};e.writeNoData=function(a,b,c){null!=a&&"number"===typeof a&&(b[c]=Ma(a))};e.readObjectIdField=function(a,b){a||(a=(a=b.fields.filter(c=>"esriFieldTypeOID"===c.type||"oid"===c.type))&&a[0]&&a[0].name);return a};e.readSourceType=function(a,b){return this._isMosaicDataset(b)?"mosaic-dataset":"raster-dataset"};e.readRenderer=function(a,b,c){a=b?.layerDefinition?.drawingInfo?.renderer;
c=P.read(a,c);if(null==c)return null;"vector-field"===c.type&&b.symbolTileSize&&!a.symbolTileSize&&(c.symbolTileSize=b.symbolTileSize);qa.isSupportedRendererType(c)||Z.getLogger(this.declaredClass).warn("ArcGISImageService","Imagery layer doesn't support given renderer type.");return c};e.writeRenderer=function(a,b,c){b.layerDefinition=b.layerDefinition||{};b.layerDefinition.drawingInfo=b.layerDefinition.drawingInfo||{};b.layerDefinition.drawingInfo.renderer=a.toJSON();"vector-field"===a.type&&(b.symbolTileSize=
a.symbolTileSize)};e.readRenderingRule=function(a,b){a=b.rasterFunctionInfos;return b.renderingRule||a&&a.length&&"None"!==a[0].name?this._isRFTJson(b.renderingRule)?H.fromJSON({rasterFunctionDefinition:b.renderingRule}):H.fromJSON(b.renderingRule||{rasterFunctionInfos:b.rasterFunctionInfos}):null};e.writeRenderingRule=function(a,b,c){a=a.toJSON();b[c]=a.rasterFunctionDefinition?a.rasterFunctionDefinition:a};e.readSpatialReference=function(a,b){return(a=a||b.extent.spatialReference)?U.fromJSON(a):
null};e.readPixelType=function(a){return V.fromJSON(a)||a};e.writePixelType=function(a,b,c){if(t.isNone(this.serviceRasterInfo)||this.pixelType!==this.serviceRasterInfo.pixelType)b[c]=V.toJSON(a)};e.readVersion=function(a,b){(a=b.currentVersion)||(a=b.hasOwnProperty("fields")||b.hasOwnProperty("timeInfo")?10:9.3);return a};e.applyFilter=function(a){let b=a;this.pixelFilter&&(b=this._clonePixelData(a),this.pixelFilter(b));return b};e.applyRenderer=async function(a,b){var c=a;const {renderer:d,symbolizer:l,
pixelFilter:f,bandIds:n}=this;if(!this._isPicture()&&d&&l&&!f){c=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(d.toJSON());const k=this._rasterJobHandler.instance;k?(c&&(l.bind(),await k.updateSymbolizer(l,b),this._cachedRendererJson=d.toJSON()),b=await k.symbolize({bandIds:n,...a},b),c={extent:a.extent,pixelBlock:b}):c={extent:a.extent,pixelBlock:l.symbolize({bandIds:n,...a})}}return c};e.destroy=function(){this._shutdownJobHandler()};e.increaseRasterJobHandlerUsage=function(){this._rasterJobHandler.refCount++};
e.decreaseRasterJobHandlerUsage=function(){this._rasterJobHandler.refCount--;0>=this._rasterJobHandler.refCount&&this._shutdownJobHandler()};e.computeAngles=async function(a,b){if(!(await this._fetchCapabilities(b?.signal)).operations.supportsComputeAngles)throw new y("imagery-layer:compute-angles","this operation is not supported on the input image service");a=z.ensureClass(Ca,a).clone();return D.computeAngles(this.url,a,this._getRequestOptions(b))};e.computePixelSpaceLocations=async function(a,
b){if(!(await this._fetchCapabilities(b?.signal)).operations.supportsComputePixelLocation)throw new y("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");a=z.ensureClass(Ga,a).clone();return D.computePixelSpaceLocations(this.url,a,this._getRequestOptions(b))};e.computeHistograms=async function(a,b){if(!(await this._fetchCapabilities(b?.signal)).operations.supportsComputeHistograms)throw new y("imagery-layer:compute-histograms","this operation is not supported on the input image service");
a=z.ensureClass(da,a).clone();this._applyMosaicAndRenderingRules(a);return D.computeHistograms(this.url,a,this._getRequestOptions(b))};e.computeStatisticsHistograms=async function(a,b){if(!(await this._fetchCapabilities(b?.signal)).operations.supportsComputeStatisticsHistograms)throw new y("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");a=z.ensureClass(da,a).clone();this._applyMosaicAndRenderingRules(a);return D.computeStatisticsHistograms(this.url,
a,this._getRequestOptions(b))};e.measureHeight=async function(a,b){const c=await this._fetchCapabilities(b?.signal);if(!("base-and-top"===a.operationType?c.mensuration.supportsHeightFromBaseAndTop:"base-and-top-shadow"===a.operationType?c.mensuration.supportsHeightFromBaseAndTopShadow:c.mensuration.supportsHeightFromTopAndTopShadow))throw new y("imagery-layer:measure-height","this operation is not supported on the input image service");a=z.ensureClass(Fa,a).clone();this._applyMosaicAndRenderingRules(a);
return D.measureHeight(this.url,a,this._getRequestOptions(b))};e.measureAreaAndPerimeter=async function(a,b){const c=await this._fetchCapabilities(b?.signal);if(!c.mensuration.supportsAreaAndPerimeter||a.is3D&&!c.mensuration.supports3D)throw new y("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");a=z.ensureClass(Da,a).clone();this._applyMosaicAndRenderingRules(a);return D.measureAreaAndPerimeter(this.url,a,this._getRequestOptions(b))};e.measureDistanceAndAngle=
async function(a,b){const c=await this._fetchCapabilities(b?.signal);if(!c.mensuration.supportsDistanceAndAngle||a.is3D&&!c.mensuration.supports3D)throw new y("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");a=z.ensureClass(Ea,a).clone();this._applyMosaicAndRenderingRules(a);return D.measureDistanceAndAngle(this.url,a,this._getRequestOptions(b))};e.measurePointOrCentroid=async function(a,b){const c=await this._fetchCapabilities(b?.signal);if(!c.mensuration.supportsPointOrCentroid||
a.is3D&&!c.mensuration.supports3D)throw new y("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");a=z.ensureClass(Ha,a).clone();this._applyMosaicAndRenderingRules(a);return D.measurePointOrCentroid(this.url,a,this._getRequestOptions(b))};e.getField=function(a){const {fieldsIndex:b}=this;return t.isSome(b)?b.get(a):void 0};e.getFieldDomain=function(a,b){return(a=this.getField(a))?a.domain:null};e.fetchImage=async function(a,b,c,d={}){if(null==a||
null==b||null==c)throw new y("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){var l=await this.generateRasterInfo(this.renderingRule,{signal:d.signal});l&&(this.rasterInfo=l)}l=this.getExportImageServiceParameters(a,b,c,d.timeExtent);if(null==l){if(d.requestAsImageElement&&this._canRequestImageElement(this.format))return a=document.createElement("canvas"),a.width=b,a.height=c,d.returnImageBitmap?
{imageBitmap:await ba.createBitmap(a,`${w(this.parsedUrl)}/exportImage`)}:{imageOrCanvasElement:a};const {bandIds:n,rasterInfo:k}=this;d=(n?.length||k.bandCount)??0;l=b*c;var f=k.pixelType;const r=[];for(let m=0;m<d;m++)r.push(Q.createEmptyBand(f,l));return{pixelData:{pixelBlock:new Q({width:b,height:c,pixels:r,mask:new Uint8Array(l),pixelType:f}),extent:a}}}f=!!d.requestAsImageElement&&!this.pixelFilter;return this._requestArrayBuffer({imageServiceParameters:l,imageProps:{extent:a,width:b,height:c,
format:this.format},requestAsImageElement:f,returnImageBitmap:f&&!!d.returnImageBitmap,signal:d.signal})};e.fetchKeyProperties=function(a){return C(w(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:10.3<=this.version?a?.renderingRule:null})}).then(b=>b.data)};e.fetchRasterAttributeTable=function(a){return 10.1>this.version?Promise.reject(new y("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):C(w(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:10.3<=
this.version?a?.renderingRule:null})}).then(b=>ya.fromJSON(b.data))};e.getCatalogItemRasterInfo=function(a,b){const c=this._getQueryParams();b={...b,query:c};return Ba.getCatalogItemRasterInfo(w(this.parsedUrl),a,b)};e.getCatalogItemICSInfo=async function(a,b){var {data:c}=await C(w(this.parsedUrl)+"/"+a+"/info/ics",{query:this._getQueryParams(),...b});if(c=c&&c.ics){var d=null;try{d=(await C(w(this.parsedUrl)+"/"+a+"/info",{query:this._getQueryParams(),...b})).data.extent}catch{}if(!d||!d.spatialReference)return{ics:c,
icsToPixelTransform:null,icsExtent:null,northDirection:null};var l=10.7<=this.version?C(w(this.parsedUrl)+"/"+a+"/info/icstopixel",{query:this._getQueryParams(),...b}).then(q=>q.data).catch(()=>({})):{},f=d.spatialReference,n={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[d]}),inSR:f.wkid||JSON.stringify(f),outSR:"0:"+a};n=C(w(this.parsedUrl)+"/project",{query:this._getQueryParams(n),...b}).then(q=>q.data).catch(()=>({}));var k=(d.xmin+d.xmax)/2,r=(d.ymax-d.ymin)/6;d=
d.ymin+r;var m=[];for(let q=0;5>q;q++)m.push({x:k,y:d+r*q});a={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:m}),inSR:f.wkid||JSON.stringify(f),outSR:"0:"+a};b=C(w(this.parsedUrl)+"/project",{query:this._getQueryParams(a),...b}).then(q=>q.data).catch(()=>({}));a=await Promise.all([l,n,b]);b=a[0].ipxf;null==b&&(l=c.geodataXform?.xf_0,"topup"===l?.name?.toLowerCase()&&6===l?.coefficients?.length&&(b={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:l.coefficients,
cellsizeRatio:0,type:"GeometricXform"}}));if(l=S.fromJSON(a[1]&&a[1].geometries&&a[1].geometries[0]))l.spatialReference=new U({wkid:0,imageCoordinateSystem:c});a=a[2].geometries?a[2].geometries.filter(q=>null!=q&&null!=q.x&&null!=q.y&&"NaN"!==q.x&&"NaN"!==q.y):[];n=a.length;if(3>n)return{ics:c,icsToPixelTransform:b,icsExtent:l,northDirection:null};d=r=k=f=0;for(m=0;m<n;m++)f+=a[m].x,k+=a[m].y,r+=a[m].x*a[m].x,d+=a[m].x*a[m].y;n=(n*d-f*k)/(n*r-f*f);f=0;k=a[4].x>a[0].x;a=a[4].y>a[0].y;Infinity===n?
f=a?90:270:0===n?f=k?0:180:0<n?f=k?180*Math.atan(n)/Math.PI:180*Math.atan(n)/Math.PI+180:0>n&&(f=a?180+180*Math.atan(n)/Math.PI:360+180*Math.atan(n)/Math.PI);return{ics:c,icsToPixelTransform:b,icsExtent:l,northDirection:f}}};e.generateRasterInfo=async function(a,b){a=z.ensureClass(H,a);if(this.serviceRasterInfo&&(!a||"none"===a.functionName?.toLowerCase()||this._isVectorFieldResampleFunction(a)))return this.serviceRasterInfo;const c=Ka(a);if(!c)return null;if(this._functionRasterInfos[c])return this._functionRasterInfos[c];
a=this._generateRasterInfo(a,b);this._functionRasterInfos[c]=a;try{return await a}catch{return this._functionRasterInfos[c]=null}};e.getExportImageServiceParameters=function(a,b,c,d){a=a.clone().shiftCentralMeridian();const l=D.getImageSpatialReferenceQueryParameter(a.spatialReference,w(this.parsedUrl));this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const f=this.exportImageServiceParameters.toJSON(),{bandIds:n,noData:k}=f;var {renderingRule:r}=
f,m=this.renderingRule?.rasterFunctionDefinition,q=!this.renderer||"raster-stretch"===this.renderer.type;n?.length&&this._hasRenderingRule(this.renderingRule)&&!m&&q?(m={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:n}},"Stretch"===r.rasterFunction?(m.rasterFunctionArguments.Raster=r.rasterFunctionArguments.Raster,r.rasterFunctionArguments.Raster=m):"Colormap"===r.rasterFunction?(q=r.rasterFunctionArguments.Raster,"Stretch"===q?.rasterFunction?(m.rasterFunctionArguments.Raster=q.rasterFunctionArguments.Raster,
q.rasterFunctionArguments.Raster=m):(m.rasterFunctionArguments.Raster=q,r.rasterFunctionArguments.Raster=m)):(m.rasterFunctionArguments.Raster=r,r=m),f.bandIds=void 0):f.bandIds=n?.join(",");k instanceof Array&&0<k.length&&(f.noData=k.join(","));d=this._processMultidimensionalIntersection(null,d,this.exportImageServiceParameters.mosaicRule);if(d.isOutSide)return null;f.mosaicRule=t.isSome(d.mosaicRule)?JSON.stringify(d.mosaicRule):null;d=d.timeExtent;f.renderingRule=this._getRenderingRuleString(H.fromJSON(r));
r={};if(t.isSome(d)){const {start:u,end:B}=d.toJSON();if(u&&B&&u===B)r.time=""+u;else if(null!=u||null!=B)r.time=`${null==u?"null":u},${null==B?"null":B}`}return{bbox:a.xmin+","+a.ymin+","+a.xmax+","+a.ymax,bboxSR:l,imageSR:l,size:b+","+c,...f,...r}};e.getSamples=async function(a,b){if(!(await this._fetchCapabilities(b?.signal))?.operations.supportsGetSamples)throw new y("imagery-layer:get-samples","getSamples operation is not supported on the input image service");a=z.ensureClass(Ia,a).clone();const {raster:c}=
this;c&&null==a.raster&&(a.raster=c);return D.getSamples(this.url,a,this._getRequestOptions(b))};e.identify=async function(a,b){if(!(await this._fetchCapabilities(b?.signal)).operations.supportsIdentify)throw new y("imagery-layer:identify","identify operation is not supported on the input image service");a=z.ensureClass(ea,a).clone();const c=this._processMultidimensionalIntersection(a.geometry,a.timeExtent,a.mosaicRule||this.mosaicRule);if(c.isOutSide)throw new y("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");
a.timeExtent=t.unwrap(c.timeExtent);a.mosaicRule=t.unwrap(c.mosaicRule);const {raster:d,renderingRule:l}=this;l&&null==a.renderingRule&&(a.renderingRule=l);d&&null==a.raster&&(a.raster=d);return D.identify(this.url,a,this._getRequestOptions(b))};e.createQuery=function(){const a=new T;a.outFields=["*"];a.returnGeometry=!0;a.where=this.definitionExpression||"1\x3d1";return a};e.queryRasters=async function(a,b){({query:a,requestOptions:b}=await this._prepareForQuery(a,b));return wa.executeQueryJSON(this.url,
a,b)};e.queryObjectIds=async function(a,b){({query:a,requestOptions:b}=await this._prepareForQuery(a,b));return Aa.executeForIds(this.url,a,b)};e.queryRasterCount=async function(a,b){({query:a,requestOptions:b}=await this._prepareForQuery(a,b));return za.executeForCount(this.url,a,b)};e.queryVisibleRasters=async function(a,b){if(!a)throw new y("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const {pixelSize:c,returnDomainValues:d,returnTopmostRaster:l,showNoDataRecords:f}=
b||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let n=!1;var k=null,r=null;const m=this._rasterFunctionNamesIndex;if(t.isSome(a.outFields)&&(n=a.outFields.some(v=>!v.toLowerCase().includes("raster.servicepixelvalue")),10.4<=this.version)){r=a.outFields.filter(x=>x.toLowerCase().includes("raster.servicepixelvalue")&&24<x.length).map(x=>{x=x.slice(25);return[this._updateRenderingRulesFunctionName(x,m),x]});k=r.map(x=>new H({functionName:x[0]}));r=r.map(x=>x[1]);
const {renderingRule:v}=this;0===k.length?v?.functionName?(k.push(v),r.push(v.functionName)):k=null:v?.functionName&&!k.some(x=>x.functionName===v.functionName)&&(k.push(v),r.push(v.functionName))}const q=t.isNone(a.outSpatialReference)||a.outSpatialReference.equals(this.spatialReference);var {multidimensionalSubset:u}=this;let B=a.timeExtent||this.timeExtent;if(u){const {isOutside:v,intersection:x}=J.intersectMultimensionalSubset(u,{geometry:t.unwrap(a.geometry),timeExtent:t.unwrap(a.timeExtent),
multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(v)throw new y("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");x&&t.isSome(x.timeExtent)&&(B=x.timeExtent)}u=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,B);k=this._getQueryParams({geometry:a.geometry,timeExtent:B,mosaicRule:u,renderingRule:10.4>this.version?this.renderingRule:null,
renderingRules:k,pixelSize:c,returnCatalogItems:n,returnGeometry:q,raster:this.raster,maxItemCount:l?1:null});delete k.f;k=new ea(k);try{await this.generateRasterInfo(this.renderingRule);const v=await D.identify(this.url,k,{signal:b?.signal,query:{...this.customParameters}}),x=a.outFields,Oa=null!=v.value&&v.value.toLowerCase().includes("nodata");if(!n||q||!v?.catalogItems?.features.length||!f&&Oa)return this._processVisibleRastersResponse(v,{returnDomainValues:d,templateRRFunctionNames:r,showNoDataRecords:f,
templateFields:x});const M=this.objectIdField||"ObjectId",fa=v.catalogItems?.features??[],Pa=fa.map(N=>N.attributes?.[M]),Qa=new T({objectIds:Pa,returnGeometry:!0,outSpatialReference:a.outSpatialReference,outFields:[M]}),ha=await this.queryRasters(Qa);ha?.features?.length&&ha.features.forEach(N=>{fa.forEach(W=>{W.attributes[M]===N.attributes[M]&&(W.geometry=new xa(N.geometry),t.isSome(a.outSpatialReference)&&(W.geometry.spatialReference=a.outSpatialReference))})});return this._processVisibleRastersResponse(v,
{returnDomainValues:d,templateRRFunctionNames:r,showNoDataRecords:f,templateFields:x})}catch{throw new y("imagery-layer:query-visible-rasters","encountered error when querying visible rasters");}};e.fetchVariableStatisticsHistograms=async function(a,b){var c=C(w(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:a}),signal:b}).then(d=>d.data?.statistics);a=C(w(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:a}),signal:b}).then(d=>d.data?.histograms);c=await Promise.all([c,
a]);c[0]&&c[0].forEach(d=>{d.avg=d.mean;d.stddev=d.standardDeviation});return{statistics:c[0]||null,histograms:c[1]||null}};e.createFlowMesh=async function(a,b){const c=this._rasterJobHandler.instance;return c?c.createFlowMesh(a,b):Ja.createFlowMesh(a.meshType,a.simulationSettings,a.flowData,t.isSome(b.signal)?b.signal:(new AbortController).signal)};e.getMultidimensionalSubsetVariables=function(a){return J.getSubsetVariablesFromMdInfo(this.multidimensionalSubset,a??this.serviceRasterInfo.multidimensionalInfo)};
e._fetchService=async function(a){await this._fetchServiceInfo(a);this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);var b=this.sourceJSON;b=t.isSome(this.serviceRasterInfo)?Promise.resolve(this.serviceRasterInfo):ca.fetchServiceRasterInfo(w(this.parsedUrl),b,{signal:a,query:this._getQueryParams()}).then(d=>{this._set("serviceRasterInfo",d);this._set("multidimensionalInfo",d.multidimensionalInfo);return d});a=this._hasRenderingRule(this.renderingRule)?this.generateRasterInfo(this.renderingRule,
{signal:a}):null;const c=this._getRasterFunctionInfos();return Promise.all([b,a,c]).then(d=>{d[1]?this._set("rasterInfo",d[1]):this._set("rasterInfo",d[0]);d[2]&&this._set("rasterFunctionInfos",d[2]);this.renderer&&!this._isSupportedRenderer(this.renderer)&&(this._set("renderer",null),Z.getLogger(this.declaredClass).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer"));this._set("renderer",this._configRenderer(this.renderer));this.addHandles([ka.watch(()=>
this.renderingRule,l=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this.generateRasterInfo(l).then(f=>{f&&(this.rasterInfo=f)})})]);({serviceRasterInfo:d}=this);t.isSome(d.multidimensionalInfo)&&this._updateMultidimensionalDefinition(d)})};e._combineMosaicRuleWithTimeExtent=function(a,b){var c=this.timeInfo,{multidimensionalInfo:d}=this.serviceRasterInfo;if(t.isNone(a)||t.isNone(d)||t.isNone(b)||t.isNone(c?.startField))return a;const {startField:l}=c,f=d.variables.some(m=>
m.dimensions.some(q=>q.name===l))?l:"StdTime";a=a.clone();if("mosaic-dataset"===this.sourceType)return a.multidimensionalDefinition=a.multidimensionalDefinition?.filter(m=>m.dimensionName!==f),this._cleanupMultidimensionalDefinition(a);a.multidimensionalDefinition=a.multidimensionalDefinition||[];c=a.multidimensionalDefinition.filter(m=>m.dimensionName===f);d=t.isSome(b.start)?b.start.getTime():null;b=t.isSome(b.end)?b.end.getTime():null;const n=null==d||null==b||d===b,k=n?[d||b]:[[d,b]],r=10.8<=
this.version;c.length?c.forEach(m=>{m.dimensionName===f&&(r?(m.dimensionName=null,m.isSlice=!1,m.values=[]):(m.isSlice=n,m.values=k))}):r||(b=a.multidimensionalDefinition.filter(m=>null!=m.variableName&&null==m.dimensionName),b.length?b.forEach(m=>{m.dimensionName=f;m.isSlice=n;m.values=k}):a.multidimensionalDefinition.push(new na({variableName:"",dimensionName:f,isSlice:n,values:k})));return this._cleanupMultidimensionalDefinition(a)};e._cleanupMultidimensionalDefinition=function(a){if(t.isNone(a))return null;
a.multidimensionalDefinition&&(a.multidimensionalDefinition=a.multidimensionalDefinition.filter(b=>!(!b.variableName&&!b.dimensionName)),0===a.multidimensionalDefinition.length&&(a.multidimensionalDefinition=null));return"mosaic-dataset"!==this.sourceType&&null==a.multidimensionalDefinition?null:a};e._prepareForQuery=async function(a,b){if(!(await this._fetchCapabilities(b?.signal)).operations.supportsQuery)throw new y("imagery-layer:query-rasters","query operation is not supported on the input image service");
a=t.isSome(a)?z.ensureClass(T,a):this.createQuery();b=this._getRequestOptions(b);this.raster&&(b.query={...b.query,raster:this.raster});return{query:a,requestOptions:b}};e._initJobHandler=async function(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const a=new ta;this._rasterJobHandler.connectionPromise=a.initialize().then(()=>{this._rasterJobHandler.instance=a},()=>{});await this._rasterJobHandler.connectionPromise};e._shutdownJobHandler=function(){this._rasterJobHandler.instance&&
this._rasterJobHandler.instance.destroy();this._rasterJobHandler.instance=null;this._rasterJobHandler.connectionPromise=null;this._rasterJobHandler.refCount=0;this._cachedRendererJson=null};e._isSupportedRenderer=function(a){const {rasterInfo:b,renderingRule:c}=this;return"unique-value"===a.type&&this._hasRenderingRule(c)&&1===b?.bandCount&&["u8","s8"].includes(b.pixelType)||null!=b&&null!=a&&L.getSupportedRendererTypes(b).includes(a.type)};e._fetchCapabilities=async function(a){if(this.capabilities)return this.capabilities;
await this._fetchServiceInfo(a);return this.capabilities};e._fetchServiceInfo=async function(a){let b=this.sourceJSON;if(!b){const {data:c,ssl:d}=await C(w(this.parsedUrl),{query:this._getQueryParams(),signal:a});this.sourceJSON=b=c;d&&(this.url=this.url.replace(/^http:/i,"https:"))}if(-1<b.capabilities?.toLowerCase().split(",").map(c=>c.trim()).indexOf("tilesonly"))throw new y("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(b,{origin:"service",
url:this.parsedUrl})};e._isMosaicDataset=function(a){return a.serviceSourceType?"esriImageServiceSourceTypeMosaicDataset"===a.serviceSourceType:0<a.fields?.length};e._isMosaicRuleSupported=function(a){if(!a)return!1;const b=this._isMosaicDataset(a);a=10.71<=a.currentVersion&&a.hasMultidimensions&&!(1<a.fields?.length);return b||a};e._isVectorFieldResampleFunction=function(a){if(t.isNone(a))return!1;const {functionName:b,functionArguments:c}=a;a="resample"===b?.toLowerCase();const d=c?.ResampleType||
c?.resampleType;return a&&(7===d||10===d)};e._isPicture=function(){return!this.format||this.format.includes("jpg")||this.format.includes("png")};e._configRenderer=function(a){var b=this._isPicture();const {rasterInfo:c}=this;if(!b&&!this.pixelFilter||this._isVectorDataSet())!this.bandIds&&3<=c.bandCount&&(!(b=L.getDefaultBandCombination(c))||3===c.bandCount&&0===b[0]&&1===b[1]&&2===b[2]||(this.bandIds=b)),a||(a=L.createDefaultRenderer(c,{bandIds:this.bandIds,variableName:this.renderingRule?null:this.mosaicRule?.multidimensionalDefinition?.[0].variableName})),
b=L.normalizeRendererJSON(a.toJSON()),this.symbolizer?(this.symbolizer.rendererJSON=b,this.symbolizer.rasterInfo=c):this.symbolizer=new va({rendererJSON:b,rasterInfo:c}),this.symbolizer.bind().success||(this.symbolizer=null);return a};e._clonePixelData=function(a){return null==a?a:{extent:a.extent&&a.extent.clone(),pixelBlock:t.isSome(a.pixelBlock)?a.pixelBlock.clone():null}};e._getQueryParams=function(a){a&&t.isSome(a.renderingRule)&&"string"!==typeof a.renderingRule&&(a.renderingRule=this._getRenderingRuleString(a.renderingRule));
const {raster:b,viewId:c}=this;return{raster:b,viewId:c,f:"json",...a,...this.customParameters}};e._getRequestOptions=function(a){return{...a,query:{...a?.query,...this.customParameters}}};e._decodePixelBlock=function(a,b,c){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:a,options:b}):R.decode(a,b,c)};e._getRasterFunctionInfos=async function(a){const b=this.sourceJSON.rasterFunctionInfos;return this.loaded?b:b&&10.3<=this.version?1===b.length&&"none"===b[0].name.toLowerCase()?
b:(await C(w(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:a})).data?.rasterFunctionInfos:null};e._canRequestImageElement=function(a){return!this.pixelFilter&&(!a||a.includes("png"))};e._requestArrayBuffer=async function(a){const {imageProps:b,requestAsImageElement:c,returnImageBitmap:d,signal:l}=a;if(c&&this._canRequestImageElement(b.format)){var f=`${w(this.parsedUrl)}/exportImage`;({data:a}=await C(f,{responseType:d?"blob":"image",query:this._getQueryParams({f:"image",
...this.refreshParameters,...a.imageServiceParameters}),signal:l}));return a instanceof Blob?{imageBitmap:await ba.createBitmap(a,f),params:b}:{imageOrCanvasElement:a,params:b}}f=this._initJobHandler();a=C(w(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...a.imageServiceParameters}),signal:l});a=(await Promise.all([a,f]))[0].data;var n=f=b.format||"jpgpng";"bsq"!==n&&"bip"!==n&&(n=R.getFormat(a));if(!n)throw new y("imagery-layer:fetch-image","unsupported format signature "+
String.fromCharCode.apply(null,new Uint8Array(a)));n="gif"===f||"bmp"===f||f.includes("png")&&("png"===n||"jpg"===n);const k={signal:l};return{pixelData:{pixelBlock:await (n?R.decode(a,{useCanvas:!0,...b},k):this._decodePixelBlock(a,{width:b.width,height:b.height,planes:null,pixelType:null,noDataValue:null,format:f},k)),extent:b.extent},params:b}};e._generateRasterInfo=function(a,b){const c=this._getQueryParams();b={...b,query:c};return ca.generateRasterInfo(w(this.parsedUrl),a,b)};e._isValidCustomizedMosaicRule=
function(a){return a&&JSON.stringify(a.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())};e._updateMultidimensionalDefinition=function(a){if(!this._isValidCustomizedMosaicRule(this.mosaicRule)&&(a=J.getDefaultMultidimensionalDefinition(a,{multidimensionalSubset:this.multidimensionalSubset}),t.isSome(a)&&0<a.length)){this.mosaicRule=this.mosaicRule||new G;const b=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.renderingRule&&"none"!==this.renderingRule.functionName?.toLowerCase()&&
a.forEach(c=>c.variableName="");a=a.filter(({variableName:c,dimensionName:d})=>c&&"*"!==c||d);!b?.length&&a.length&&(this.mosaicRule.multidimensionalDefinition=a)}};e._processVisibleRastersResponse=function(a,b){b=b||{};const c=a.value,{templateRRFunctionNames:d,showNoDataRecords:l,returnDomainValues:f,templateFields:n}=b;b=a.processedValues;var k=a.catalogItems&&a.catalogItems.features;let r=a.properties&&a.properties.Values&&a.properties.Values.map(v=>v.replace(/ /gi,", "))||[];var m=this.objectIdField||
"ObjectId",q="string"===typeof c&&c.toLowerCase().includes("nodata");a=[];!c||k||q||(k={},k[m]=0,k=new ia(this.fullExtent,null,k),r=[c],k=[k]);if(!k)return[];this._updateResponseFieldNames(k,n);q&&!l&&(k=[]);for(m=0;m<k.length;m++){q=k[m];if(null!=c){var u=r[m];var B=this.renderingRule&&b&&0<b.length&&d&&0<d.length&&d.includes(this.renderingRule.functionName)?b[d.indexOf(this.renderingRule.functionName)]:c;if("nodata"===u.toLowerCase()&&!l)continue;q.attributes["Raster.ItemPixelValue"]=u;q.attributes["Raster.ServicePixelValue"]=
B;this._updateFeatureWithMagDirValues(q,u);const v=this.fields&&0<this.fields.length;B=this.renderingRule&&t.isSome(this.serviceRasterInfo.attributeTable)?v?u:c:B;this.renderingRule||(B=v?u:c);this._updateFeatureWithRasterAttributeTableValues(q,B)}q.sourceLayer=q.layer=this;f&&this._updateFeatureWithDomainValues(q);if(d&&b&&d.length===b.length)for(u=0;u<d.length;u++)q.attributes["Raster.ServicePixelValue."+d[u]]=b[u];a.push(k[m])}return a};e._processMultidimensionalIntersection=function(a,b,c){const {multidimensionalSubset:d}=
this;if(!d)return c=this._combineMosaicRuleWithTimeExtent(c,b),{isOutSide:!1,timeExtent:b,mosaicRule:c};if(d){const {isOutside:l,intersection:f}=J.intersectMultimensionalSubset(d,{geometry:a,timeExtent:b});if(l)return{isOutSide:!0,timeExtent:null,mosaicRule:null};f&&t.isSome(f.timeExtent)&&(b=f.timeExtent)}c=this._combineMosaicRuleWithTimeExtent(c,b);return t.isSome(c)&&c.multidimensionalDefinition&&({isOutside:a}=J.intersectMultimensionalSubset(d,{multidimensionalDefinition:c.multidimensionalDefinition}),
a)?{isOutSide:!0,timeExtent:null,mosaicRule:null}:{isOutSide:!1,timeExtent:b,mosaicRule:c}};e._updateFeatureWithRasterAttributeTableValues=function(a,b){var c=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(!t.isNone(c)){var {features:d,fields:l}=c,f=(c=l.map(k=>k.name).filter(k=>"value"===k.toLowerCase()))&&c[0];if(f){var n=d.filter(k=>k.attributes[f]===(null!=b?parseInt(b,10):null));n&&n[0]&&l.forEach(k=>{a.attributes[this._rasterAttributeTableFieldPrefix+k.name]=n[0].attributes[k.name]})}}};
e._updateFeatureWithMagDirValues=function(a,b){if(this._isVectorDataSet()){var c=b.split(/,\s*/).map(d=>parseFloat(d));b=c.map(d=>[d]);c=c.map(d=>({minValue:d,maxValue:d,noDataValue:null}));b=new Q({height:1,width:1,pixelType:"f32",pixels:b,statistics:c});null!=this.pixelFilter&&this.pixelFilter({pixelBlock:b,extent:new S(0,0,0,0,this.spatialReference)});b="esriImageServiceDataTypeVector-MagDir"===this.serviceDataType?[b.pixels[0][0],b.pixels[1][0]]:ua.uvComponentToVector([b.pixels[0][0],b.pixels[1][0]]);
a.attributes["Raster.Magnitude"]=b[0];a.attributes["Raster.Direction"]=b[1]}};e._updateFeatureWithDomainValues=function(a){const b=this.fields&&this.fields.filter(c=>c.domain&&"coded-value"===c.domain.type);null!=b&&b.forEach(c=>{const d=a.attributes[c.name];if(null!=d){const l=c.domain.codedValues.find(f=>f.code===d);l&&(a.attributes[c.name]=l.name)}})};e._updateResponseFieldNames=function(a,b){if(b&&!(1>b.length)){var c=this.fieldsIndex;t.isNone(c)||a.forEach(d=>{if(d&&d.attributes)for(const l of b){const f=
c.get(l)?.name;f&&f!==l&&(d.attributes[l]=d.attributes[f],delete d.attributes[f])}})}};e._getRenderingRuleString=function(a){if(a){a=a.toJSON();a=a.rasterFunctionDefinition??a;if(a.thumbnail||a.thumbnailEx)a.thumbnail=a.thumbnailEx=null;return JSON.stringify(a)}return null};e._hasRenderingRule=function(a){return null!=a&&null!=a.functionName&&"none"!==a.functionName.toLowerCase()};e._updateRenderingRulesFunctionName=function(a,b){if(a&&!(1>a.length)){if("Raw"===a)return a.replace("Raw","None");var c=
a.toLowerCase().replace(/ /gi,"_");return b.has(c)?b.get(c):a}};e._isRFTJson=function(a){return a&&a.name&&a.arguments&&a.function&&a.hasOwnProperty("functionType")};e._isVectorDataSet=function(){return"esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType};e._applyMosaicAndRenderingRules=function(a){const {raster:b,mosaicRule:c,renderingRule:d}=this;d&&null==a.renderingRule&&(a.renderingRule=d);c&&null==a.mosaicRule&&(a.mosaicRule=
c);b&&null==a.raster&&(a.raster=b)};e._readCapabilities=function(a){const b=a.capabilities?a.capabilities.toLowerCase().split(",").map(u=>u.trim()):["image","catalog"],{currentVersion:c,advancedQueryCapabilities:d,maxRecordCount:l}=a,f=b.includes("image"),n="esriImageServiceDataTypeElevation"===a.serviceDataType;var k=!!(a.spatialReference||a.extent&&a.extent.spatialReference);const r=b.includes("edit");k=b.includes("mensuration")&&k;const m=null==a.mensurationCapabilities?[]:a.mensurationCapabilities.toLowerCase().split(",").map(u=>
u.trim()),q=k&&m.includes("basic");return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:f,supportsExportImage:f,supportsIdentify:f,supportsMeasure:k,supportsDownload:b.includes("download"),supportsQuery:b.includes("catalog")&&a.fields&&0<a.fields.length,supportsGetSamples:10.2<=c&&f,supportsProject:10.3<=c&&f,supportsComputeStatisticsHistograms:10.4<=c&&f,supportsQueryBoundary:10.6<=c&&f,supportsCalculateVolume:10.7<=c&&n,supportsComputePixelLocation:10.7<=c&&b.includes("catalog"),
supportsComputeAngles:10.91<=c,supportsAdd:r,supportsDelete:r,supportsEditing:r,supportsUpdate:r,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryTopFeatures:!1},query:{maxRecordCount:l,maxRecordCountFactor:void 0,supportsStatistics:!!d?.supportsStatistics,supportsOrderBy:!!d?.supportsOrderBy,supportsDistinct:!!d?.supportsDistinct,
supportsPagination:!!d?.supportsPagination,supportsStandardizedQueriesOnly:!!d?.useStandardizedQueries,supportsPercentileStatistics:!!d?.supportsPercentileStatistics,supportsCentroid:!!d?.supportsReturningGeometryCentroid,supportsDistance:!!d?.supportsQueryWithDistance,supportsExtent:!!d?.supportsReturningQueryExtent,supportsGeometryProperties:!!d?.supportsReturningGeometryProperties,supportsHavingClause:!!d?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,
supportsResultType:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!d?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0},
mensuration:{supportsDistanceAndAngle:q,supportsAreaAndPerimeter:q,supportsPointOrCentroid:q,supportsHeightFromBaseAndTop:k&&m.includes("base-top height"),supportsHeightFromBaseAndTopShadow:k&&m.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:k&&m.includes("top-top shadow height"),supports3D:k&&m.includes("3d")}}};O._createClass(K,[{key:"_rasterFunctionNamesIndex",get:function(){const a=new Map;if(!this.rasterFunctionInfos||t.isSome(this.rasterFunctionInfos)&&1>this.rasterFunctionInfos.length)return a;
t.isSome(this.rasterFunctionInfos)&&this.rasterFunctionInfos.forEach(b=>{a.set(b.name.toLowerCase().replace(/ /gi,"_"),b.name)});return a}},{key:"fieldsIndex",get:function(){return this.fields?new pa(this.fields):null}},{key:"format",set:function(a){a&&La.has(a.toLowerCase())&&this._set("format",a.toLowerCase())}},{key:"mosaicRule",set:function(a){a&&a.mosaicMethod&&(a=G.fromJSON({...a.toJSON(),mosaicMethod:a.mosaicMethod,mosaicOperation:a.mosaicOperation}));this._set("mosaicRule",a)}},{key:"parsedUrl",
get:function(){return la.urlToObject(this.url)}},{key:"renderer",set:function(a){this.loaded&&(a=this._configRenderer(a));this._set("renderer",a)}},{key:"rasterFields",get:function(){const a=this._rasterAttributeTableFieldPrefix||"Raster.";var b=new F({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"});const c=new F({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),d=new F({name:"Raster.ServicePixelValue.Raw",
alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let l=this.fields?Y.clone(this.fields):[];l.push(c);this.capabilities?.operations.supportsQuery&&this.fields&&0<this.fields.length&&l.push(b);10.4<=this.version&&t.isSome(this.rasterFunctionInfos)&&this.rasterFunctionInfos.some(f=>"none"===f.name.toLowerCase())&&l.push(d);t.isSome(this.rasterFunctionInfos)&&this.rasterFunctionInfos.filter(f=>"none"!==f.name.toLowerCase()).forEach(f=>{l.push(new F({name:"Raster.ServicePixelValue."+
f.name,alias:f.name,domain:null,editable:!1,length:50,type:"string"}))});this._isVectorDataSet()&&(l.push(new F({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),l.push(new F({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));({attributeTable:b}=this.rasterInfo??{});t.isSome(b)&&(b=b.fields.filter(f=>"esriFieldTypeOID"!==f.type&&"value"!==f.name.toLowerCase()).map(f=>{const n=Y.clone(f);n.name=a+f.name;return n}),l=l.concat(b));return l}},
{key:"renderingRule",set:function(a){a&&a.rasterFunction&&(a=H.fromJSON({...a.toJSON(),rasterFunction:a.rasterFunction,rasterFunctionArguments:a.rasterFunctionArguments}));this._set("renderingRule",a)}}]);return K}(g);h.__decorate([p.property()],g.prototype,"_functionRasterInfos",void 0);h.__decorate([p.property()],g.prototype,"_rasterJobHandler",void 0);h.__decorate([p.property()],g.prototype,"_cachedRendererJson",void 0);h.__decorate([p.property({readOnly:!0})],g.prototype,"_serviceSupportsMosaicRule",
void 0);h.__decorate([A.reader("_serviceSupportsMosaicRule",["currentVersion","fields"])],g.prototype,"readServiceSupportsMosaicRule",null);h.__decorate([p.property()],g.prototype,"_rasterAttributeTableFieldPrefix",void 0);h.__decorate([p.property({readOnly:!0})],g.prototype,"_rasterFunctionNamesIndex",null);h.__decorate([p.property()],g.prototype,"adjustAspectRatio",void 0);h.__decorate([p.property({type:[z.Integer],json:{write:!0}})],g.prototype,"bandIds",void 0);h.__decorate([A.reader("bandIds")],
g.prototype,"readBandIds",null);h.__decorate([p.property({readOnly:!0,json:{read:!1}})],g.prototype,"capabilities",void 0);h.__decorate([A.reader("service","capabilities",["capabilities","currentVersion","serviceDataType"])],g.prototype,"readCapabilities",null);h.__decorate([p.property({type:Number})],g.prototype,"compressionQuality",void 0);h.__decorate([E.writer("compressionQuality")],g.prototype,"writeCompressionQuality",null);h.__decorate([p.property({type:Number})],g.prototype,"compressionTolerance",
void 0);h.__decorate([E.writer("compressionTolerance")],g.prototype,"writeCompressionTolerance",null);h.__decorate([p.property({json:{read:{source:"copyrightText"}}})],g.prototype,"copyright",void 0);h.__decorate([p.property({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],g.prototype,"defaultMosaicRule",void 0);h.__decorate([A.reader("defaultMosaicRule",["defaultMosaicMethod"])],g.prototype,"readDefaultMosaicRule",null);h.__decorate([p.property({type:String,json:{name:"layerDefinition.definitionExpression",
write:{enabled:!0,allowNull:!0}}})],g.prototype,"definitionExpression",void 0);h.__decorate([p.property({readOnly:!0,constructOnly:!0})],g.prototype,"exportImageServiceParameters",void 0);h.__decorate([p.property()],g.prototype,"rasterInfo",void 0);h.__decorate([p.property({readOnly:!0,type:[F]})],g.prototype,"fields",void 0);h.__decorate([p.property({readOnly:!0})],g.prototype,"fieldsIndex",null);h.__decorate([p.property({type:"png png8 png24 png32 jpg bmp gif jpgpng lerc tiff".split(" "),json:{write:!0}})],
g.prototype,"format",null);h.__decorate([A.reader("service","format",["serviceDataType"])],g.prototype,"readFormat",null);h.__decorate([p.property({type:S})],g.prototype,"fullExtent",void 0);h.__decorate([p.property({readOnly:!0})],g.prototype,"hasMultidimensions",void 0);h.__decorate([p.property({json:{read:{source:"maxImageHeight"}}})],g.prototype,"imageMaxHeight",void 0);h.__decorate([p.property({json:{read:{source:"maxImageWidth"}}})],g.prototype,"imageMaxWidth",void 0);h.__decorate([p.property({type:String,
json:{type:I.interpolationKebab.jsonValues,read:I.interpolationKebab.read,write:I.interpolationKebab.write}})],g.prototype,"interpolation",void 0);h.__decorate([p.property()],g.prototype,"minScale",void 0);h.__decorate([A.reader("service","minScale")],g.prototype,"readMinScale",null);h.__decorate([p.property()],g.prototype,"maxScale",void 0);h.__decorate([A.reader("service","maxScale")],g.prototype,"readMaxScale",null);h.__decorate([p.property({type:G})],g.prototype,"mosaicRule",null);h.__decorate([A.reader("mosaicRule",
["mosaicRule","defaultMosaicMethod"])],g.prototype,"readMosaicRule",null);h.__decorate([E.writer("mosaicRule")],g.prototype,"writeMosaicRule",null);h.__decorate([p.property()],g.prototype,"multidimensionalInfo",void 0);h.__decorate([p.property({type:ra,json:{write:!0}})],g.prototype,"multidimensionalSubset",void 0);h.__decorate([p.property({json:{type:z.Integer}})],g.prototype,"noData",void 0);h.__decorate([E.writer("noData")],g.prototype,"writeNoData",null);h.__decorate([p.property({type:String,
json:{type:I.noDataInterpretationKebab.jsonValues,read:I.noDataInterpretationKebab.read,write:I.noDataInterpretationKebab.write}})],g.prototype,"noDataInterpretation",void 0);h.__decorate([p.property({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],g.prototype,"objectIdField",void 0);h.__decorate([A.reader("objectIdField")],g.prototype,"readObjectIdField",null);h.__decorate([p.property({})],g.prototype,"geometryType",void 0);h.__decorate([p.property({})],g.prototype,"typeIdField",void 0);
h.__decorate([p.property({})],g.prototype,"types",void 0);h.__decorate([p.property({readOnly:!0})],g.prototype,"parsedUrl",null);h.__decorate([p.property({type:Function})],g.prototype,"pixelFilter",void 0);h.__decorate([p.property()],g.prototype,"raster",void 0);h.__decorate([p.property({readOnly:!0})],g.prototype,"sourceType",void 0);h.__decorate([A.reader("sourceType",["serviceSourceType","fields"])],g.prototype,"readSourceType",null);h.__decorate([p.property()],g.prototype,"viewId",void 0);h.__decorate([p.property({types:P.rasterRendererTypes,
json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:P.websceneRasterRendererTypes,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(e){return{enabled:e&&"vector-field"!==e.type&&"flow"!==e.type}}}}}}})],g.prototype,"renderer",null);h.__decorate([A.reader("renderer")],g.prototype,"readRenderer",null);h.__decorate([E.writer("renderer")],g.prototype,"writeRenderer",null);h.__decorate([p.property()],g.prototype,"symbolizer",void 0);h.__decorate([p.property(aa.opacity)],
g.prototype,"opacity",void 0);h.__decorate([p.property({readOnly:!0})],g.prototype,"rasterFields",null);h.__decorate([p.property({constructOnly:!0})],g.prototype,"rasterFunctionInfos",void 0);h.__decorate([p.property({type:H})],g.prototype,"renderingRule",null);h.__decorate([A.reader("renderingRule",["renderingRule","rasterFunctionInfos"])],g.prototype,"readRenderingRule",null);h.__decorate([E.writer("renderingRule")],g.prototype,"writeRenderingRule",null);h.__decorate([p.property()],g.prototype,
"serviceDataType",void 0);h.__decorate([p.property({readOnly:!0,type:U})],g.prototype,"spatialReference",void 0);h.__decorate([A.reader("spatialReference",["spatialReference","extent"])],g.prototype,"readSpatialReference",null);h.__decorate([p.property({json:{type:V.jsonValues}})],g.prototype,"pixelType",void 0);h.__decorate([A.reader("pixelType")],g.prototype,"readPixelType",null);h.__decorate([E.writer("pixelType")],g.prototype,"writePixelType",null);h.__decorate([p.property({constructOnly:!0,type:sa})],
g.prototype,"serviceRasterInfo",void 0);h.__decorate([p.property()],g.prototype,"sourceJSON",void 0);h.__decorate([p.property(aa.url)],g.prototype,"url",void 0);h.__decorate([p.property({readOnly:!0})],g.prototype,"version",void 0);h.__decorate([A.reader("version",["currentVersion","fields","timeInfo"])],g.prototype,"readVersion",null);return g=h.__decorate([ma.subclass("esri.layers.mixins.ArcGISImageService")],g)};Object.defineProperty(X,Symbol.toStringTag,{value:"Module"})});