// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../request ../../core/Error ../../core/Logger ../../core/maybe ../../core/promiseUtils ../../core/urlUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/arrayUtils ../../core/has ../../core/accessorSupport/decorators/reader ../../core/accessorSupport/decorators/subclass ../../core/accessorSupport/decorators/writer ../../core/accessorSupport/originUtils ../../geometry/Extent ../../geometry/HeightModelInfo ../../geometry/SpatialReference ../support/arcgisLayerUrl ../support/commonProperties ../support/I3SIndexInfo ../support/schemaValidatorLoader ../../portal/Portal ../../portal/PortalItem ../../webdoc/support/saveUtils".split(" "),
function(m,w,f,x,l,G,H,I,A,h,Q,R,S,q,J,K,B,y,L,z,r,C,M,N,D,O,E){const n=G.getLogger("esri.layers.mixins.SceneService");var t;(function(d){d[d.existingItem=0]="existingItem";d[d.newItem=1]="newItem"})(t||(t={}));const F={getTypeKeywords:()=>[],portalItemLayerType:"unknown",validationOptions:{enabled:!0,ignoreUnsupported:!1,failPolicy:"throw"}};m.SaveOperationType=void 0;(function(d){d[d.SAVE=0]="SAVE";d[d.SAVE_AS=1]="SAVE_AS"})(m.SaveOperationType||(m.SaveOperationType={}));m.SCENE_SERVICE_ITEM_TYPE=
"Scene Service";m.SceneService=d=>{d=function(e){function u(){var a=P.apply(this,arguments);a.spatialReference=null;a.fullExtent=null;a.heightModelInfo=null;a.minScale=0;a.maxScale=0;a.version={major:Number.NaN,minor:Number.NaN,versionString:""};a.copyright=null;a.sublayerTitleMode="item-title";a.title=null;a.layerId=null;a.indexInfo=null;a._debouncedSaveOperations=I.debounce(async(b,c,g)=>{switch(b){case m.SaveOperationType.SAVE:return a._save(c);case m.SaveOperationType.SAVE_AS:return a._saveAs(g,
c)}});return a}w._inherits(u,e);var P=w._createSuper(u);e=u.prototype;e.readSpatialReference=function(a,b){return this._readSpatialReference(b)};e._readSpatialReference=function(a){if(null!=a.spatialReference)return z.fromJSON(a.spatialReference);a=a.store;a=(a=a.indexCRS||a.geographicCRS)&&parseInt(a.substring(a.lastIndexOf("/")+1,a.length),10);return null!=a?new z(a):null};e.readFullExtent=function(a,b,c){if(null!=a&&"object"===typeof a)return b=null==a.spatialReference?{...a,spatialReference:this._readSpatialReference(b)}:
a,y.fromJSON(b,c);c=b.store;b=this._readSpatialReference(b);return null==b||null==c||null==c.extent||!Array.isArray(c.extent)||c.extent.some(g=>-1E38>g)?null:new y({xmin:c.extent[0],ymin:c.extent[1],xmax:c.extent[2],ymax:c.extent[3],spatialReference:b})};e.parseVersionString=function(a){const b={major:Number.NaN,minor:Number.NaN,versionString:a};a=a.split(".");2<=a.length&&(b.major=parseInt(a[0],10),b.minor=parseInt(a[1],10));return b};e.readVersion=function(a,b){a=b.store;return this.parseVersionString(null!=
a.version?a.version.toString():"")};e.readTitlePortalItem=function(a){return"item-title"!==this.sublayerTitleMode?void 0:a};e.readTitleService=function(a,b){a=this.portalItem&&this.portalItem.title;if("item-title"===this.sublayerTitleMode)return r.titleFromUrlAndName(this.url,b.name);b=b.name;if(!b&&this.url){const c=r.parse(this.url);H.isSome(c)&&(b=c.title)}"item-title-and-service-name"===this.sublayerTitleMode&&a&&(b=a+" - "+b);return r.cleanTitle(b)};e.writeUrl=function(a,b,c,g){r.writeUrlWithLayerId(this,
a,"layers",b,g)};e._fetchIndexAndUpdateExtent=async function(a,b){this.indexInfo=M.fetchIndexInfo(this.parsedUrl.path,this.rootNode,a,this.apiKey,n,b);null==this.fullExtent||this.fullExtent.hasZ||this._updateExtent(await this.indexInfo)};e._updateExtent=function(a){if("page"===a?.type){var b=a.rootIndex%a.pageSize;b=a.rootPage?.nodes?.[b];if(null==b||null==b.obb||null==b.obb.center||null==b.obb.halfSize)throw new l("sceneservice:invalid-node-page","Invalid node page.");-1E38>b.obb.center[0]||null==
this.fullExtent||this.fullExtent.hasZ||(a=b.obb.halfSize,b=b.obb.center[2],a=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]),this.fullExtent.zmin=b-a,this.fullExtent.zmax=b+a)}else if("node"===a?.type&&(b=a.rootNode?.mbs,Array.isArray(b)&&4===b.length&&!(-1E38>b[0]))){a=b[2];b=b[3];var {fullExtent:c}=this;c&&(c.zmin=a-b,c.zmax=a+b)}};e._fetchService=async function(a){if(null==this.url)throw new l("sceneservice:url-not-set","Scene service can not be loaded without valid portal item or url");if(null==this.layerId&&
/SceneServer\/*$/i.test(this.url)){const b=await this._fetchFirstLayerId(a);null!=b&&(this.layerId=b)}return this._fetchServiceLayer(a)};e._fetchFirstLayerId=async function(a){a=await x(this.url,{query:{f:"json",token:this.apiKey},responseType:"json",signal:a});if(a.data&&Array.isArray(a.data.layers)&&0<a.data.layers.length)return a.data.layers[0].id};e._fetchServiceLayer=async function(a){a=await x(this.parsedUrl?.path??"",{query:{f:"json",token:this.apiKey},responseType:"json",signal:a});a.ssl&&
(this.url=this.url.replace(/^http:/i,"https:"));let b=!1;a.data.layerType&&"Voxel"===a.data.layerType&&(b=!0);if(b)return this._fetchVoxelServiceLayer();a=a.data;this.read(a,this._getServiceContext());this.validateLayer(a)};e._fetchVoxelServiceLayer=async function(a){a=(await x(this.parsedUrl?.path+"/layer",{query:{f:"json",token:this.apiKey},responseType:"json",signal:a})).data;this.read(a,this._getServiceContext());this.validateLayer(a)};e._getServiceContext=function(){return{origin:"service",portalItem:this.portalItem,
portal:this.portalItem?.portal,url:this.parsedUrl}};e._ensureLoadBeforeSave=async function(){await this.load();"beforeSave"in this&&"function"===typeof this.beforeSave&&await this.beforeSave()};e.validateLayer=function(a){};e._updateTypeKeywords=function(a,b,c){a.typeKeywords||(a.typeKeywords=[]);b=b.getTypeKeywords();for(const g of b)a.typeKeywords.push(g);a.typeKeywords&&(a.typeKeywords=a.typeKeywords.filter((g,p,v)=>v.indexOf(g)===p),c===t.newItem&&(a.typeKeywords=a.typeKeywords.filter(g=>"Hosted Service"!==
g)))};e._saveAs=async function(a,b){b={...F,...b};a=O.from(a);a||(n.error("_saveAs(): requires a portal item parameter"),await Promise.reject(new l("sceneservice:portal-item-required","_saveAs() requires a portal item to save to")));a.id&&(a=a.clone(),a.id=null);const c=a.portal||D.getDefault();await this._ensureLoadBeforeSave();a.type="Scene Service";a.portal=c;const g={origin:"portal-item",url:null,messages:[],portal:c,portalItem:a,writtenProperties:[],blockedRelativeUrls:[],resources:{toAdd:[],
toUpdate:[],toKeep:[],pendingOperations:[]}},p={layers:[this.write({},g)]};await Promise.all(g.resources.pendingOperations??[]);await this._validateAgainstJSONSchema(p,g,b);a.url=this.url;a.title||(a.title=this.title);this._updateTypeKeywords(a,b,t.newItem);await c.signIn();await c.user?.addItem({item:a,folder:b&&b.folder,data:p});await E.saveResources(this.resourceReferences,g,null);this.portalItem=a;B.updateOrigins(g);return g.portalItem=a};e._save=async function(a){a={...F,...a};if(!this.portalItem)throw n.error("_save(): requires the .portalItem property to be set"),
new l("sceneservice:portal-item-not-set","Portal item to save to has not been set on this SceneService");if("Scene Service"!==this.portalItem.type)throw n.error("_save(): Non-matching portal item type. Got "+this.portalItem.type+", expected Scene Service"),new l("sceneservice:portal-item-wrong-type",'Portal item needs to have type "Scene Service"');await this._ensureLoadBeforeSave();const b={origin:"portal-item",url:this.portalItem.itemUrl&&A.urlToObject(this.portalItem.itemUrl),messages:[],portal:this.portalItem.portal||
D.getDefault(),portalItem:this.portalItem,writtenProperties:[],blockedRelativeUrls:[],resources:{toAdd:[],toUpdate:[],toKeep:[],pendingOperations:[]}},c={layers:[this.write({},b)]};await Promise.all(b.resources.pendingOperations??[]);await this._validateAgainstJSONSchema(c,b,a);this.portalItem.url=this.url;this.portalItem.title||(this.portalItem.title=this.title);this._updateTypeKeywords(this.portalItem,a,t.existingItem);await this.portalItem.update({data:c});await E.saveResources(this.resourceReferences,
b,null);B.updateOrigins(b);return this.portalItem};e._validateAgainstJSONSchema=async function(a,b,c){b=b.messages?.filter(k=>"error"===k.type).map(k=>new l(k.name,k.message,k.details))??[];c?.validationOptions?.ignoreUnsupported&&(b=b.filter(k=>"layer:unsupported"!==k.name&&"symbol:unsupported"!==k.name&&"symbol-layer:unsupported"!==k.name&&"property:unsupported"!==k.name&&"url:unsupported"!==k.name&&"scenemodification:unsupported"!==k.name));const g=c?.validationOptions,p=g?.enabled,v=N.getLoader();
if(p&&v&&(a=(await v()).validate(a,c.portalItemLayerType),0<a.length&&(c=`Layer item did not validate:\n${a.join("\n")}`,n.error(`_validateAgainstJSONSchema(): ${c}`),"throw"===g.failPolicy)))throw b=a.map(k=>new l("sceneservice:schema-validation",k)).concat(b),new l("sceneservice-validate:error","Failed to save layer item due to schema validation, see `details.errors`.",{combined:b});if(0<b.length)throw new l("sceneservice:save","Failed to save SceneService due to unsupported or invalid content. See 'details.errors' for more detailed information",
{errors:b});};w._createClass(u,[{key:"url",set:function(a){a=r.sanitizeUrlWithLayerId({layer:this,url:a,nonStandardUrlAllowed:!1,logger:n});this._set("url",a.url);null!=a.layerId&&this._set("layerId",a.layerId)}},{key:"parsedUrl",get:function(){var a=this._get("url");a=A.urlToObject(a);null!=this.layerId&&(a.path=`${a.path}/layers/${this.layerId}`);return a}}]);return u}(d);f.__decorate([h.property(C.id)],d.prototype,"id",void 0);f.__decorate([h.property({type:z})],d.prototype,"spatialReference",
void 0);f.__decorate([q.reader("spatialReference",["spatialReference","store.indexCRS","store.geographicCRS"])],d.prototype,"readSpatialReference",null);f.__decorate([h.property({type:y})],d.prototype,"fullExtent",void 0);f.__decorate([q.reader("fullExtent",["fullExtent","store.extent","spatialReference","store.indexCRS","store.geographicCRS"])],d.prototype,"readFullExtent",null);f.__decorate([h.property({readOnly:!0,type:L})],d.prototype,"heightModelInfo",void 0);f.__decorate([h.property({type:Number,
json:{name:"layerDefinition.minScale",write:!0,origins:{service:{read:{source:"minScale"},write:!1}}}})],d.prototype,"minScale",void 0);f.__decorate([h.property({type:Number,json:{name:"layerDefinition.maxScale",write:!0,origins:{service:{read:{source:"maxScale"},write:!1}}}})],d.prototype,"maxScale",void 0);f.__decorate([h.property({readOnly:!0})],d.prototype,"version",void 0);f.__decorate([q.reader("version",["store.version"])],d.prototype,"readVersion",null);f.__decorate([h.property({type:String,
json:{read:{source:"copyrightText"}}})],d.prototype,"copyright",void 0);f.__decorate([h.property({type:String,json:{read:!1}})],d.prototype,"sublayerTitleMode",void 0);f.__decorate([h.property({type:String})],d.prototype,"title",void 0);f.__decorate([q.reader("portal-item","title")],d.prototype,"readTitlePortalItem",null);f.__decorate([q.reader("service","title",["name"])],d.prototype,"readTitleService",null);f.__decorate([h.property({type:Number,json:{origins:{service:{read:{source:"id"}},"portal-item":{write:{target:"id",
isRequired:!0,ignoreOrigin:!0},read:!1}}}})],d.prototype,"layerId",void 0);f.__decorate([h.property(C.url)],d.prototype,"url",null);f.__decorate([K.writer("url")],d.prototype,"writeUrl",null);f.__decorate([h.property()],d.prototype,"parsedUrl",null);f.__decorate([h.property({readOnly:!0})],d.prototype,"store",void 0);f.__decorate([h.property({type:String,readOnly:!0,json:{read:{source:"store.rootNode"}}})],d.prototype,"rootNode",void 0);return d=f.__decorate([J.subclass("esri.layers.mixins.SceneService")],
d)};Object.defineProperty(m,Symbol.toStringTag,{value:"Module"})});