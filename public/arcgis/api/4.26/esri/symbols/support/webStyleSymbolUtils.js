// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../symbols ../../core/devEnvironmentUtils ../../core/Error ../../core/maybe ../../core/urlUtils ../../portal/Portal ../../chunks/persistableUrlUtils ./jsonUtils ./StyleOrigin ./styleUtils ./Thumbnail".split(" "),function(p,C,q,r,l,k,t,u,v,w,g,x){function y(a,d,e,f,h){var b=a.data;const z=e&&l.isSome(e.portal)?e.portal:t.getDefault(),A={portal:z,url:k.urlToObject(a.baseUrl),origin:"portal-item"};b=b.items.find(c=>c.name===d);if(!b)return Promise.reject(new r("symbolstyleutils:symbol-name-not-found",
`The symbol name '${d}' could not be found`,{symbolName:d}));let m=u.fromJSON(g.symbolUrlFromStyleItem(b,f),A),n=b.thumbnail?.href??null;const B=b.thumbnail&&b.thumbnail.imageData;q.isDevEnvironment()&&(m=q.adjustStaticAGOUrl(m)??"",n=q.adjustStaticAGOUrl(n));const D={portal:z,url:k.urlToObject(k.removeFile(m)),origin:"portal-item"};return g.requestJSON(m,h).then(c=>{c="cimRef"===f?g.makeCIMSymbolRef(c.data):c.data;if((c=v.fromJSON(c,D))&&C.isSymbol3D(c)){if(n){const E=u.fromJSON(n,A);c.thumbnail=
new x.Thumbnail({url:E})}else B&&(c.thumbnail=new x.Thumbnail({url:`data:image/png;base64,${B}`}));a.styleUrl?c.styleOrigin=new w({portal:e.portal,styleUrl:a.styleUrl,name:d}):a.styleName&&(c.styleOrigin=new w({portal:e.portal,styleName:a.styleName,name:d}))}return c})}function F(a,d,e){const f=g.Style2DUrlTemplate.replace(/\{SymbolName\}/gi,a),h=l.isSome(d.portal)?d.portal:t.getDefault();return g.requestJSON(f,e).then(b=>{b=g.makeCIMSymbolRef(b.data);return v.fromJSON(b,{portal:h,url:k.urlToObject(k.removeFile(f)),
origin:"portal-item"})})}p.fetchSymbolFromStyle=y;p.resolveWebStyleSymbol=function(a,d,e,f){const h=a.name;return l.isNone(h)?Promise.reject(new r("symbolstyleutils:style-symbol-reference-name-missing","Missing name in style symbol reference")):a.styleName&&"Esri2DPointSymbolsStyle"===a.styleName?F(h,d,f):g.fetchStyle(a,d,f).then(b=>y(l.unwrapOrThrow(b),h,d,e,f))};Object.defineProperty(p,Symbol.toStringTag,{value:"Module"})});