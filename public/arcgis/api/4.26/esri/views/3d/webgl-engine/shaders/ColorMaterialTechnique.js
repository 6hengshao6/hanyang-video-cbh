// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("require exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/vec4f64 ../core/shaderLibrary/ShaderOutput ../core/shaderModules/interfaces ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../lib/DefaultVertexAttributeLocations ../lib/OrderIndependentTransparency ../lib/Program ../lib/StencilUtils ../lib/TransparencyPassType ../../../../chunks/ColorMaterial.glsl ../../../webgl/renderState".split(" "),function(v,l,e,w,r,m,x,f,y,g,z,n,t,
A,h){m=function(c){function a(){var b=p.apply(this,arguments);b.color=w.ZEROS;return b}e._inherits(a,c);var p=e._createSuper(a);return e._createClass(a)}(m.NoParameters);f=function(c){function a(){return p.apply(this,arguments)}e._inherits(a,c);var p=e._createSuper(a);c=a.prototype;c.initializeProgram=function(b){return new z.Program(b.rctx,a.shader.get().build(this.configuration),y.Default3D)};c._createPipeline=function(b,k){const d=this.configuration,q=b===t.TransparencyPassType.NONE,u=b===t.TransparencyPassType.FrontFace;
return h.makePipelineState({blending:d.output!==r.ShaderOutput.Color&&d.output!==r.ShaderOutput.Alpha||!d.transparent?null:q?g.blendingDefault:g.oitBlending(b),culling:h.cullingParams(d.cullFace),depthTest:{func:g.oitDepthTest(b)},depthWrite:q||u?d.writeDepth?h.defaultDepthWriteParams:null:null,colorWrite:h.defaultColorWriteParams,stencilWrite:d.hasOccludees?n.stencilWriteMaskOn:null,stencilTest:d.hasOccludees?k?n.stencilToolMaskBaseParams:n.stencilBaseAllZerosParams:null,polygonOffset:q||u?d.polygonOffset?
B:null:g.getOITPolygonOffset(d.enableOffset)})};c.initializePipeline=function(){this._occludeePipelineState=this._createPipeline(this.configuration.transparencyPassType,!0);return this._createPipeline(this.configuration.transparencyPassType,!1)};c.getPipelineState=function(b,k){return k?this._occludeePipelineState:e._get(e._getPrototypeOf(a.prototype),"getPipelineState",this).call(this,b,k)};return e._createClass(a)}(f.ShaderTechnique);f.shader=new x.ReloadableShaderModule(A.ColorMaterial,()=>new Promise((c,
a)=>v(["./ColorMaterial.glsl"],c,a)));const B={factor:1,units:1};l.ColorMaterialPassParameters=m;l.ColorMaterialTechnique=f;Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});