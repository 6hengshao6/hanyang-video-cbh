// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("require exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/tslib.es6 ../core/shaderLibrary/ShaderOutput ../core/shaderTechnique/ReloadableShaderModule ../core/shaderTechnique/ShaderTechnique ../core/shaderTechnique/ShaderTechniqueConfiguration ../lib/basicInterfaces ../lib/OrderIndependentTransparency ../lib/Program ../lib/TransparencyPassType ../lib/VertexAttribute ../materials/DefaultTechniqueConfiguration ../../../../chunks/ShadedColorMaterial.glsl ../../../webgl/enums ../../../webgl/renderState".split(" "),
function(z,k,g,d,l,b,m,e,w,n,A,p,r,B,C,t,q){m=function(f){function c(){return u.apply(this,arguments)}g._inherits(c,f);var u=g._createSuper(c);f=c.prototype;f.initializeProgram=function(a){return new A.Program(a.rctx,c.shader.get().build(this.configuration),x)};f._setPipelineState=function(a){const h=this.configuration,v=a===p.TransparencyPassType.NONE,y=a===p.TransparencyPassType.FrontFace;return q.makePipelineState({blending:h.output!==l.ShaderOutput.Color&&h.output!==l.ShaderOutput.Alpha||!h.transparent?
null:v?n.blendingDefault:n.oitBlending(a),culling:q.cullingParams(h.cullFace),depthTest:{func:y?t.CompareFunction.LESS:h.shadingEnabled?t.CompareFunction.LEQUAL:t.CompareFunction.LESS},depthWrite:v?h.writeDepth?q.defaultDepthWriteParams:null:n.oitDepthWrite(a),colorWrite:q.defaultColorWriteParams,polygonOffset:v||y?null:n.OITPolygonOffset})};f.initializePipeline=function(){return this._setPipelineState(this.configuration.transparencyPassType)};return g._createClass(c)}(m.ShaderTechnique);m.shader=
new b.ReloadableShaderModule(C.ShadedColorMaterialShader,()=>new Promise((f,c)=>z(["./ShadedColorMaterial.glsl"],f,c)));b=function(f){function c(){var a=u.apply(this,arguments);a.output=l.ShaderOutput.Color;a.cullFace=w.CullFaceOptions.None;a.transparencyPassType=p.TransparencyPassType.NONE;a.hasSlicePlane=!1;a.transparent=!1;a.writeDepth=!0;a.screenSizeEnabled=!0;a.shadingEnabled=!0;a.hasMultipassTerrain=!1;a.cullAboveGround=!1;return a}g._inherits(c,f);var u=g._createSuper(c);return g._createClass(c)}(B.DefaultTechniqueConfiguration);
d.__decorate([e.parameter({count:l.ShaderOutput.COUNT})],b.prototype,"output",void 0);d.__decorate([e.parameter({count:w.CullFaceOptions.COUNT})],b.prototype,"cullFace",void 0);d.__decorate([e.parameter({count:p.TransparencyPassType.COUNT})],b.prototype,"transparencyPassType",void 0);d.__decorate([e.parameter()],b.prototype,"hasSlicePlane",void 0);d.__decorate([e.parameter()],b.prototype,"transparent",void 0);d.__decorate([e.parameter()],b.prototype,"writeDepth",void 0);d.__decorate([e.parameter()],
b.prototype,"screenSizeEnabled",void 0);d.__decorate([e.parameter()],b.prototype,"shadingEnabled",void 0);d.__decorate([e.parameter()],b.prototype,"hasMultipassTerrain",void 0);d.__decorate([e.parameter()],b.prototype,"cullAboveGround",void 0);const x=new Map([[r.VertexAttribute.POSITION,0],[r.VertexAttribute.NORMAL,1],[r.VertexAttribute.OFFSET,2]]);k.ShadedColorMaterialTechnique=m;k.ShadedColorMaterialTechniqueConfiguration=b;k.vertexAttributeLocations=x;Object.defineProperty(k,Symbol.toStringTag,
{value:"Module"})});