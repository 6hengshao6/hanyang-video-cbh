// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/vec3 ../../../../chunks/vec3f64 ../../../../chunks/vec4f64 ../../../../geometry/support/aaBoundingBox ../../../../geometry/support/buffer/BufferView ../../support/buffer/InterleavedLayout ../core/shaderLibrary/ShaderOutput ../lib/basicInterfaces ../lib/GLMaterial ../lib/Material ../lib/RenderSlot ../lib/Util ../lib/VertexAttribute ./internal/bufferWriterUtils ./internal/MaterialUtil ../shaders/ShadedColorMaterialTechnique".split(" "),
function(r,g,m,t,x,y,G,H,q,I,J,z,n,K,f,A,B,u){let P=function(e){function d(a){a=b.call(this,a,new C);a.supportsEdges=!0;a._configuration=new u.ShadedColorMaterialTechniqueConfiguration;a._vertexAttributeLocations=u.vertexAttributeLocations;return a}g._inherits(d,e);var b=g._createSuper(d);e=d.prototype;e.getConfiguration=function(a,c){this._configuration.output=a;this._configuration.cullFace=this.parameters.cullFace;this._configuration.hasSlicePlane=this.parameters.hasSlicePlane;this._configuration.transparent=
this.parameters.transparent;this._configuration.writeDepth=this.parameters.writeDepth;this._configuration.screenSizeEnabled=this.parameters.screenSizeEnabled;this._configuration.shadingEnabled=this.parameters.shadingEnabled;this._configuration.transparencyPassType=c.transparencyPassType;this._configuration.hasMultipassTerrain=c.multipassTerrain.enabled;this._configuration.cullAboveGround=c.multipassTerrain.cullAboveGround;return this._configuration};e.intersect=function(a,c,k,p,D,E){if(this.parameters.screenSizeEnabled){const v=
a.vertexAttributes.get(f.VertexAttribute.OFFSET);B.intersectTriangleGeometry(a,k,p,D,{applyToVertex:(h,w,L,l)=>{l=m.set(F,v.data[3*l],v.data[3*l+1],v.data[3*l+2]);h=m.set(M,h,w,L);m.scale(l,l,this.parameters.screenSizeScale*k.camera.computeRenderPixelSizeAt(l));m.add(h,h,l);return[h[0],h[1],h[2]]},applyToAabb:h=>{const w=y.center(h,F);return y.scale(h,this.parameters.screenSizeScale*k.camera.computeRenderPixelSizeAt(w))}},E)}else B.intersectTriangleGeometry(a,k,p,D,void 0,E)};e.requiresSlot=function(a,
c){return c===q.ShaderOutput.Highlight?a===n.RenderSlot.OPAQUE_MATERIAL:c===q.ShaderOutput.Color||c===q.ShaderOutput.Alpha||c===q.ShaderOutput.ObjectAndLayerIdColor?(c=n.RenderSlot.OPAQUE_MATERIAL,this.parameters.transparent&&(c=this.parameters.writeDepth?n.RenderSlot.TRANSPARENT_MATERIAL:n.RenderSlot.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL),a===c||a===n.RenderSlot.DRAPED_MATERIAL):!1};e.createGLMaterial=function(a){return new N(a)};e.createBufferWriter=function(){return new O(this.parameters.screenSizeEnabled)};
return g._createClass(d)}(z.Material),N=function(e){function d(){return b.apply(this,arguments)}g._inherits(d,e);var b=g._createSuper(d);d.prototype.beginSlot=function(a){return this.ensureTechnique(u.ShadedColorMaterialTechnique,a)};return g._createClass(d)}(J),C=function(e){function d(){var a=b.apply(this,arguments);a.color=x.fromValues(1,1,1,1);a.shadingTint=x.fromValues(0,0,0,.25);a.shadingDirection=m.normalize(t.create(),[.5,-.5,-.5]);a.screenSizeScale=14;a.transparent=!1;a.writeDepth=!0;a.hasSlicePlane=
!1;a.cullFace=I.CullFaceOptions.None;a.screenSizeEnabled=!1;a.shadingEnabled=!0;return a}g._inherits(d,e);var b=g._createSuper(d);return g._createClass(d)}(z.MaterialParameters),O=function(){function e(b){this.screenSizeEnabled=b;b=H.newLayout().vec3f(f.VertexAttribute.POSITION).vec3f(f.VertexAttribute.NORMAL);this.screenSizeEnabled&&b.vec3f(f.VertexAttribute.OFFSET);this.vertexBufferLayout=b}var d=e.prototype;d.allocate=function(b){return this.vertexBufferLayout.createBuffer(b)};d.elementCount=function(b){return b.indices.get(f.VertexAttribute.POSITION).length};
d.write=function(b,a,c,k,p){A.writeDefaultAttributes(c,this.vertexBufferLayout,b,a,k,p);if(this.screenSizeEnabled)if(c.vertexAttributes.has(f.VertexAttribute.OFFSET))if(b=c.vertexAttributes.get(f.VertexAttribute.OFFSET),c=c.indices.get(f.VertexAttribute.OFFSET),K.assert(3===b.size),k=k.getField(f.VertexAttribute.OFFSET,G.BufferViewVec3f))A.writePosition(c,b.data,a,k,p);else throw Error("unable to acquire view for "+f.VertexAttribute.OFFSET);else throw Error(`${f.VertexAttribute.OFFSET} vertex attribute required for screenSizeEnabled ShadedColorMaterial`);
};return g._createClass(e)}();const F=t.create(),M=t.create();r.ShadedColorMaterial=P;r.ShadedColorMaterialParameters=C;Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});