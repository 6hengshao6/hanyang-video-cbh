// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../core/has ../3d/webgl-engine/core/shaderModules/interfaces ../3d/webgl-engine/lib/AppleAmdDriverHelper ./BufferObject ./context-util ./enums ./FramebufferObject ./WebGLDriverTestModule".split(" "),function(k,e,l,m,p,q,r,b,t,g){g=function(d){function f(c){var a=u.call(this);a._rctx=c;a._helperProgram=null;a._rctx.type===r.ContextType.WEBGL2&&l("mac")&&l("chrome")&&(a._program=a._prepareProgram(),a._helperProgram=a._prepareHelperProgram());
return a}e._inherits(f,d);var u=e._createSuper(f);d=f.prototype;d.dispose=function(){e._get(e._getPrototypeOf(f.prototype),"dispose",this).call(this);this._helperProgram?.dispose();this._helperProgram=null};d._test=function(c){const a=this._rctx;a.resetState();const h=new t.FramebufferObject(a,{colorTarget:b.TargetType.TEXTURE,depthStencilTarget:b.DepthStencilTargetType.NONE},{target:b.TextureType.TEXTURE_2D,wrapMode:b.TextureWrapMode.CLAMP_TO_EDGE,pixelFormat:b.PixelFormat.RGBA,dataType:b.PixelType.UNSIGNED_BYTE,
samplingMode:b.TextureSamplingMode.NEAREST,width:1,height:1}),n=q.BufferObject.createIndex(this._rctx,b.Usage.STATIC_DRAW,new Uint8Array([0]));a.bindFramebuffer(h);a.setViewport(0,0,1,1);a.useProgram(this._helperProgram);a.bindBuffer(n,b.BufferType.ELEMENT_ARRAY_BUFFER);a.drawElements(b.PrimitiveType.POINTS,1,b.DataType.UNSIGNED_BYTE,0);a.useProgram(c);a.bindVAO(null);a.drawArrays(b.PrimitiveType.TRIANGLES,0,258);c=new Uint8Array(4);h.readPixels(0,0,1,1,b.PixelFormat.RGBA,b.PixelType.UNSIGNED_BYTE,
c);h.dispose();n.dispose();return 255===c[0]};d._prepareProgram=function(){const c=`#version 300 es\n    precision highp float;\n\n    out float triangleId;\n\n    const vec3 triangleVertices[3] = vec3[3](vec3(-0.5, -0.5, 0.0), vec3(0.5, -0.5, 0.0), vec3(0.0, 0.5, 0.0));\n\n    void main(void) {\n      triangleId = floor(float(gl_VertexID)/3.0);\n\n      vec3 position = triangleVertices[gl_VertexID % 3];\n      float offset = triangleId / ${m.glsl.float(85)};\n      position.z = 0.5 - offset;\n\n      gl_Position = vec4(position, 1.0);\n    }\n    `,
a=`#version 300 es\n    precision highp float;\n\n    in float triangleId;\n\n    out vec4 fragColor;\n\n    void main(void) {\n      fragColor = triangleId == ${m.glsl.float(85)} ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    `;return this._rctx.programCache.acquire(c,a,new Map([]))};d._prepareHelperProgram=function(){const c=p.AppleAmdDriverHelper.getShaderSources();return this._rctx.programCache.acquire(c.vertex,c.fragment,new Map([]))};return e._createClass(f)}(g.WebGLDriverTestModule);
k.DrawArraysRequiresIndicesTypeReset=g;Object.defineProperty(k,Symbol.toStringTag,{value:"Module"})});