// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/_rollupPluginBabelHelpers ../../../core/maybe ../../../chunks/vec2 ../../../chunks/vec2f64 ../../../chunks/vec3f64 ../../../support/elevationInfoUtils ./Settings ./SnappingAlgorithm ./SnappingPoint ./snappingUtils ./candidates/ParallelLineSnappingCandidate ../support/viewUtils ../../support/geometry2dUtils".split(" "),function(A,u,E,B,F,G,v,C,w,l,x,H,y,z){w=function(q){function r(){return I.apply(this,arguments)}u._inherits(r,q);var I=u._createSuper(r);q=r.prototype;
q.snapNewVertex=function(d,a){var b=a.editGeometryOperations.data.components[0],c=b.edges.length,e=b.vertices.length;const f=[];if(2>c)return f;const {view:g}=this,h=y.vectorToScreenPoint(d,a.spatialReference,v.absoluteHeightElevationInfo,g);e=l.anyMapPointToSnappingPoint(b.vertices[e-1].pos,g,a);const m=l.anyMapPointToSnappingPoint(b.vertices[0].pos,g,a);c=b=b.edges[c-1];do{if(this.edgeExceedsShortLineThreshold(c,a)){const n=x.editEdgeToSnappingEdge(c,g,a);this._checkEdgeForParallelLines(n,e,d,h,
a,f);this._checkEdgeForParallelLines(n,m,d,h,a,f)}c=c.leftVertex.leftEdge}while(c&&c!==b);return f};q.snapExistingVertex=function(d,a){const b=[],c=E.unwrap(a.vertexHandle);var e=c.component;if(3>e.edges.length)return b;const {view:f}=this,g=y.vectorToScreenPoint(d,a.spatialReference,v.absoluteHeightElevationInfo,f),h=c.leftEdge,m=c.rightEdge,n=e.vertices[0],J=l.anyMapPointToSnappingPoint(n.pos,f,a),D=e.vertices[e.vertices.length-1],K=l.anyMapPointToSnappingPoint(D.pos,f,a);let k=e=e.edges[0];do{if(k!==
h&&k!==m&&this.edgeExceedsShortLineThreshold(k,a)){const t=x.editEdgeToSnappingEdge(k,f,a);h&&this._checkEdgeForParallelLines(t,l.anyMapPointToSnappingPoint(h.leftVertex.pos,f,a),d,g,a,b);m&&this._checkEdgeForParallelLines(t,l.anyMapPointToSnappingPoint(m.rightVertex.pos,f,a),d,g,a,b);c===n?this._checkEdgeForParallelLines(t,K,d,g,a,b):c===D&&this._checkEdgeForParallelLines(t,J,d,g,a,b)}k=k.rightVertex.rightEdge}while(k&&k!==e);return b};q._checkEdgeForParallelLines=function(d,a,b,c,e,f){const g=d.left,
h=d.right;z.projectPointToLine(p,a,g,h);if(!(B.squaredDistance(p,a)<C.defaults.parallelLineThreshold)){z.projectPointToLine(p,b,g,h,a);var {spatialReference:m,pointer:n}=e;b=l.asSnappingPoint(G.fromValues(p[0],p[1],b[2]));x.squaredScreenDistance(c,y.vectorToScreenPoint(b,m,v.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(n)&&!(this.isVertical(b,a)||this.isVertical(g,h)||this._parallelToPreviousCandidate(d,f))&&f.push(new H.ParallelLineSnappingCandidate({referenceLine:d,lineStart:a,
targetPoint:b,isDraped:"on-the-ground"===e.elevationInfo?.mode}))}};q._parallelToPreviousCandidate=function(d,a){const b=d.left,c=d.right;for(const e of a)if(z.projectPointToLine(p,c,e.constraint.start,e.constraint.end,b),B.squaredDistance(p,c)<C.defaults.parallelLineThreshold)return e.addReferenceLine(d),!0;return!1};return u._createClass(r)}(w.SnappingAlgorithm);const p=F.create();A.ParallelLineSnapper=w;Object.defineProperty(A,Symbol.toStringTag,{value:"Module"})});