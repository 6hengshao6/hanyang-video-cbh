// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.27/esri/copyright.txt for details.
//>>built
define("../../core/has ../../core/Error ../../core/maybe ../../core/screenUtils ../../geometry/support/scaleUtils ../../renderers/visualVariables/SizeVariable ./scaleRange ../support/binningUtils ../support/adapters/support/layerUtils".split(" "),function(Q,g,v,m,A,n,B,C,q){async function D(a){var {view:b}=a;if(!(a&&b&&a.layer))throw new g("size-range:missing-parameters","'view' and 'layer' parameters are required");a.forBinning&&C.verifyBinningParams(a,"size-range");const {layer:e,...d}=a;var c=
a.forBinning?q.binningCapableLayerTypes:q.featureCapableLayerTypes;a=q.createLayerAdapter(e,c,a.forBinning);if(!a)throw new g("size-range:invalid-parameters","'layer' must be one of these types: "+q.getLayerTypeLabels(c).join(", "));c={layerAdapter:a,...d,view:b};await b.when();b=v.isSome(c.signal)?{signal:c.signal}:null;await a.load(b);b=a.geometryType;if("point"!==b&&"multipoint"!==b&&"polyline"!==b&&"polygon"!==b)throw new g("size-range:not-supported",`sizeRange is not supported for geometryType: ${b}`);
return c}function w(a,b){({view:a}=a);if(!a)throw new g("scale-range:invalid-parameters","'view' is required");const e=b.minScale||1E8;b=a.constraints&&"effectiveLODs"in a.constraints&&a.constraints.effectiveLODs||E;a=[];for(var d in b)if(!(b[d].scale>e)){d=Number(d);d=[d-3,d,d+3,d+6];for(const c of d)-1<c&&c<b.length&&a.push(b[c].scale);break}return a.sort((c,f)=>c-f)}function F(a,b){const {view:e,layerAdapter:d}=a;if(!e)throw new g("scale-range:invalid-parameters","'view' is required");var c=d.fullExtent;
a=d.minScale||1128.497176;const f=d.maxScale||5.91657527591555E8,t=b.minScale||0;b=b.maxScale||0;c=v.isSome(c)?A.getScale(e,c):0;c=c<a&&c>f?c:0;return{scales:[a,f,t,b,c].map(Math.round).sort((k,l)=>k-l).filter((k,l,p)=>!!k&&p.indexOf(k)===l).filter((k,l,p)=>l?5<Math.abs(k-p[l-1]):!0),fullExtentScale:c}}function G(a,b){const {minScale:e,maxScale:d}=b;a=w(a,{minScale:e,maxScale:d});if(!a.length)throw new g("scale-range:insufficient-info","not enough scale values");return{minSize:new n({valueExpression:"$view.scale",
stops:a.map((c,f)=>({value:c,size:m.px2pt(H[f])}))}),maxSize:new n({valueExpression:"$view.scale",stops:a.map((c,f)=>({value:c,size:m.px2pt(I[f])}))})}}function J(a,b){const {minScale:e,maxScale:d}=b;a=w(a,{minScale:e,maxScale:d});if(!a.length)throw new g("scale-range:insufficient-info","not enough scale values");return{minSize:new n({valueExpression:"$view.scale",stops:a.map((c,f)=>({value:c,size:m.px2pt(K[f])}))}),maxSize:new n({valueExpression:"$view.scale",stops:a.map((c,f)=>({value:c,size:m.px2pt(L[f])}))})}}
function M(a,b){const {spatialStatistics:e,minScale:d,maxScale:c}=b;if(!("avgSize"in e&&e.avgSize))throw new g("size-range:insufficient-info","average polygon size is invalid");const f=e.avgSize;({view:b}=a);if(!b)throw new g("scale-range:invalid-parameters","'view' is required");const {resolution:t,scale:k}=b,l=t/k,{scales:p,fullExtentScale:N}=F(a,{minScale:d,maxScale:c}),x=[],y=[];p.forEach((u,r)=>{var h=Math.ceil(Math.ceil(f/(l*u))/4);4>h?h=4:16<h&&(h=16);const z=5*h,{min:O,max:P}={min:h,max:50>
z?50:z};h=p.indexOf(N);r=-1<h&&r>h?2:1;x.push({value:u,size:m.px2pt(O/r)});y.push({value:u,size:m.px2pt(P/r)})});a=new n({valueExpression:"$view.scale",stops:x});b=new n({valueExpression:"$view.scale",stops:y});return{minSize:a,maxSize:b}}const H=[10,8,4,2],I=[100,100,60,30],K=[2,1,.75,.5],L=[32,18,12,6],E=[{level:0,resolution:156543.03392800014,scale:5.91657527591555E8},{level:1,resolution:78271.51696399994,scale:2.95828763795777E8},{level:2,resolution:39135.75848200009,scale:1.47914381897889E8},
{level:3,resolution:19567.87924099992,scale:7.3957190948944E7},{level:4,resolution:9783.93962049996,scale:3.6978595474472E7},{level:5,resolution:4891.96981024998,scale:1.8489297737236E7},{level:6,resolution:2445.98490512499,scale:9244648.868618},{level:7,resolution:1222.992452562495,scale:4622324.434309},{level:8,resolution:611.4962262813797,scale:2311162.217155},{level:9,resolution:305.74811314055756,scale:1155581.108577},{level:10,resolution:152.87405657041106,scale:577790.554289},{level:11,resolution:76.43702828507324,
scale:288895.277144},{level:12,resolution:38.21851414253662,scale:144447.638572},{level:13,resolution:19.10925707126831,scale:72223.819286},{level:14,resolution:9.554628535634155,scale:36111.909643},{level:15,resolution:4.77731426794937,scale:18055.954822},{level:16,resolution:2.388657133974685,scale:9027.977411},{level:17,resolution:1.1943285668550503,scale:4513.988705},{level:18,resolution:.5971642835598172,scale:2256.994353},{level:19,resolution:.29858214164761665,scale:1128.497176}];return async function(a){a=
await D(a);const {view:b,layerAdapter:e,signal:d}=a,c=await B({layer:e,view:b,signal:d});switch(e.geometryType){case "point":case "multipoint":return G(a,c);case "polyline":return J(a,c);case "polygon":return M(a,c)}return null}});